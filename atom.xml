<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>haxianhe&#39;s blog</title>
  
  <subtitle>耐得住寂寞，才经得起繁华。</subtitle>
  <link href="https://blog.haxianhe.com/atom.xml" rel="self"/>
  
  <link href="https://blog.haxianhe.com/"/>
  <updated>2025-01-03T21:29:54.766Z</updated>
  <id>https://blog.haxianhe.com/</id>
  
  <author>
    <name>haxianhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024 年终总结</title>
    <link href="https://blog.haxianhe.com/2025/01/04/summary/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.haxianhe.com/2025/01/04/summary/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2025-01-03T21:00:00.000Z</published>
    <updated>2025-01-03T21:29:54.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、理财"><a href="#一、理财" class="headerlink" title="一、理财"></a>一、理财</h2><p>今年个人投资上逐渐找到了自己的节奏，个人风险偏好比较保守，适合长期持有一些不会死的产品，目前选择标的是：</p><ol><li>红利低波</li><li>纳指 100</li><li>债券基金</li></ol><p>今年理财上做的不好的一个点是9月底那一波上头了，看着大家都在赚钱脑子一热拿着钱冲进来A股，亏损了一笔。投资还是需要做自己擅长的，不懂不碰。</p><p>总得来说今年盈亏平衡。</p><h2 id="二、工作"><a href="#二、工作" class="headerlink" title="二、工作"></a>二、工作</h2><p>今年工作上总体趋于平稳，业务上随着在这个团队呆的时间变长，逐渐也变得资深了起来。</p><p>核心矛盾依然存在，升L8需要排队，希望渺茫。</p><h2 id="三、读书"><a href="#三、读书" class="headerlink" title="三、读书"></a>三、读书</h2><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20250104043848.png"></p><p>今年读书还可以，读了也有10多本，但是读书笔记写的不多。</p><ul><li><a href="https://blog.haxianhe.com/2024/01/23/book-notes/book-notes-economic/%E5%85%AB%E6%AC%A1%E5%8D%B1%E6%9C%BA/">软着陆-读《八次危机》</a></li></ul><h2 id="四、健身"><a href="#四、健身" class="headerlink" title="四、健身"></a>四、健身</h2><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20250104043944.png"></p><h2 id="五、旅行"><a href="#五、旅行" class="headerlink" title="五、旅行"></a>五、旅行</h2><p>24年国内去了：</p><ul><li>成都</li><li>黄山</li><li>威海</li><li>赤峰</li></ul><p>24年国外去了：</p><ul><li>韩国济州岛</li><li>文莱</li><li>马来西亚</li><li>新加坡</li><li>日本</li></ul><h2 id="六、24年目标回顾"><a href="#六、24年目标回顾" class="headerlink" title="六、24年目标回顾"></a>六、24年目标回顾</h2><blockquote><p>工作：拿到一个base 杭州、P7&#x2F;2-2 职级、30% 涨薪、AI 相关的高质量 offer。</p></blockquote><p>这一点没有完成，今年没有考虑换工作。</p><blockquote><p>潜力</p><ul><li>专业知识：精通团队相关技术，总结中间件技术原理，汇总各类面试技术题。</li><li>专业技能：沉淀、总结技术工作方法论。</li><li>业务思考：养成有好奇心，会主动思考业务的习惯。结合“干了多少活，犯了多少错，主动做了多少事”去思考，了解现有业务情况，明确未来业务目标，思考自己在其中能做什么。</li></ul></blockquote><p>专业能力上成长还是有的，随着在这边的角色越来越重要，会做很多决策，也会做更多的思考，目标完成 50%吧。</p><blockquote><p>爱好</p><ul><li>读书：24 年计划读书 12 本</li><li>健身：去健身房 48 次</li><li>旅行（摄影）：去一次国外旅行</li><li>写作：在运营自己的博客体系基础上，新增加两个小红书账号的运营，一个用于记录专业知识+专业技能+业务思考+面试晋升，一个用于记录自己的日常生活。</li></ul></blockquote><p>爱好上今年基本完成了，读书超过了12本，健身超过48次，去了4次国外，写作上小红书账号粉丝破千。</p><h2 id="七、25年目标"><a href="#七、25年目标" class="headerlink" title="七、25年目标"></a>七、25年目标</h2><p>理财：</p><ul><li>去杠杆</li><li>调整仓位，红利低波：纳指100：债券基金 &#x3D; 6:2:2</li><li>开港卡，以后纳指在境外定投QQQ</li></ul><p>工作：</p><ul><li>拿到一个P7&#x2F;2-2职级或者百万年薪的offer</li><li>leedcode刷1000道题</li></ul><p>读书</p><ul><li>读书24本，在个人博客上写读书笔记</li></ul><p>健身</p><ul><li>健身52次，每周至少一次</li></ul><p>旅行</p><ul><li>打卡：新疆、西藏、青海、甘肃、宁夏、贵州、江西、黑龙江</li></ul><p>记录</p><ul><li>工作，小红书工作号</li><li>读书，豆瓣&amp;微信读书&amp;个人博客</li><li>健身，训记</li><li>旅行，朋友圈</li></ul><h2 id="八、个人-Milestone"><a href="#八、个人-Milestone" class="headerlink" title="八、个人 Milestone"></a>八、<font style="color:rgb(35, 57, 77);">个人 Milestone</font></h2><p>学会了enjoy my lift，follow my hert。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、理财&quot;&gt;&lt;a href=&quot;#一、理财&quot; class=&quot;headerlink&quot; title=&quot;一、理财&quot;&gt;&lt;/a&gt;一、理财&lt;/h2&gt;&lt;p&gt;今年个人投资上逐渐找到了自己的节奏，个人风险偏好比较保守，适合长期持有一些不会死的产品，目前选择标的是：&lt;/p&gt;
&lt;ol&gt;
</summary>
      
    
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>左手主观唯心，右手辩证唯物</title>
    <link href="https://blog.haxianhe.com/2024/10/06/think/%E5%B7%A6%E6%89%8B%E4%B8%BB%E8%A7%82%E5%94%AF%E5%BF%83%EF%BC%8C%E5%8F%B3%E6%89%8B%E8%BE%A9%E8%AF%81%E5%94%AF%E7%89%A9/"/>
    <id>https://blog.haxianhe.com/2024/10/06/think/%E5%B7%A6%E6%89%8B%E4%B8%BB%E8%A7%82%E5%94%AF%E5%BF%83%EF%BC%8C%E5%8F%B3%E6%89%8B%E8%BE%A9%E8%AF%81%E5%94%AF%E7%89%A9/</id>
    <published>2024-10-06T08:48:00.000Z</published>
    <updated>2024-10-09T00:11:54.318Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20241006165850.png"></p><h2 id="一、战略上运用主观唯心的哲学思想"><a href="#一、战略上运用主观唯心的哲学思想" class="headerlink" title="一、战略上运用主观唯心的哲学思想"></a>一、战略上运用主观唯心的哲学思想</h2><p>修身齐家治国平天下，人这一生是从修身开始的，修身即修心。</p><p>那么如何修心？关于这点王阳明的心学已经告诉我们了，即知行合一，致良知。</p><p>何为知行合一？“知”就是超我，是我们后天学习培养起来的自控系统，“行”就是本我，是我们的原始本能，也是我们的潜意识，知行合一的意思就是通过在实践的过程中不断的用我们的超我去驯化我们的原始本能，从而使二者无限的接近、融合，最终得到我们的自我。此后，我们做的每一个选择，我们的一言一行都是既符合我们的本心（本我），又是高标准、有道德的（超我）、有良知的。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20241006165938.png"></p><p>知行合一是本我和超我互相融合的过程，但是要注意的是这个过程是超我驯化本我的过程，融合后应该超我占据主导地位。如果这个过程是本我把超我驯化了，融合后本我占据主导地位，人虽然短时间也很快乐，但是这种快乐都是短暂的，长期对人的发展不利，最终退化为被欲望裹挟的行尸走肉。</p><p>我们的一生，宏观上就是运用主观唯心的哲学思想不断的在实践中融合本我和超我的过程，从让自己达到一个知行合一的清明状态。</p><p>达到知行合一的状态之后，人处于一种我即理的自然状态，但这并不意味着人会变得很博学、很有能力、很强大，人的能力水平取决于他的超我部分强大与否。所以这是一个循环往复的过程，需要通过实践持续的去提升自己的超我部分，然后再在实践中用强化后的超我驯化本我，得到一个强化后的自我，终此一生都是如此。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20241006170012.png"></p><p>这里贴一下王阳明的心学，不了解的可以看下：</p><blockquote><p>王阳明心学是中国明代哲学家、思想家王阳明（王守仁）所创立的一种心性哲学，属于儒家学说中的一个重要分支。它与传统儒学有区别，主张“心即理”，强调内心的修养和觉悟。心学的主要内容包括以下几个核心思想：</p><ol><li><strong>心即理</strong>：王阳明认为，心是万物的本源，理存在于人的心中。“心即理”强调不需要外求客观的理或道德准则，因为一切的道德规范都存在于人的内心。只要反观自心，就能找到道德的依据。</li><li><strong>知行合一</strong>：这一思想是王阳明心学的核心观点之一。他认为“知”和“行”是不可分割的统一体。真正的“知”是通过行动实现的，只有通过实际的行为，才能体现出真正的认知。因此，空谈道理而不去实践是没有意义的。</li><li><strong>致良知</strong>：这是王阳明心学中另一个重要的概念。王阳明认为，每个人心中都有一个“良知”，这是判断是非善恶的根本依据。致良知就是不断提高道德意识，保持内心的清明，按照内心的良知去行事。通过致良知，人能够达到内心与外在世界的和谐。</li><li><strong>“四无”心境</strong>：王阳明提倡通过修炼心性达到“四无”的心境，即无善无恶、无喜无悲、无欲无求、无思无虑。这种心境意味着对外界环境的超然，对自身情感的超越，达到一种内心的平静和安定。</li><li><strong>格物致知的重释</strong>：传统儒家主张通过“格物”来探求事物的道理，但王阳明重新解释了“格物”的意义，认为格物并不在于向外追求知识，而是在内心寻找真理。通过反思和内省，个人可以获得对事物的真实理解。</li></ol><p>王阳明的心学注重实践，反对空谈道德，主张通过个人内心的修炼来实现道德提升，进而影响社会。</p></blockquote><h2 id="二、战术上运用辩证唯物的哲学思想"><a href="#二、战术上运用辩证唯物的哲学思想" class="headerlink" title="二、战术上运用辩证唯物的哲学思想"></a>二、战术上运用辩证唯物的哲学思想</h2><p>心学提供了大的方向，也强调了实践在追求知行合一过程中的重要性，但是更多的强调是悟，需要每个人自己去“格物”，在战术上并不具备普适性。而辩证唯物主义的出现，则在战术上提供了一种科学的、好落地的哲学思想。</p><h3 id="2-1-实践是认识的来源"><a href="#2-1-实践是认识的来源" class="headerlink" title="2.1 实践是认识的来源"></a>2.1 实践是认识的来源</h3><p>辩证唯物主义强调实践第一的地位，强调理论对于实践的依赖关系，理论的基础是实践，又转过来为实践服务。</p><p>这就告诉我们，无论我们想要做什么样的事情，想要达成什么样的目标，工作上的也好，生活上的也罢，甚至谈恋爱也是，第一点一定是去实践，切忌空想。</p><h3 id="2-2-认识的发展过程"><a href="#2-2-认识的发展过程" class="headerlink" title="2.2 认识的发展过程"></a>2.2 认识的发展过程</h3><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20241006170116.png"></p><p>认识的过程是由感性认识到理性认识，再由理性认识到实践的过程。</p><ol><li>感性认识，即通过实际的体验、观察等感官活动获得知识。一个人的知识，由直接经验和间接经验两部分构成，而对于我是间接经验的部分，对于别人来说可能就是直接经验，所以总的来说，任何知识都不能离开直接经验。</li><li>接下来通过思考、分析，上升到理性认识，这是一种更高层次的认识。</li><li>之后，理性认识必须再次回到实践中去检验，验证其正确性。</li></ol><p>这里给我们的启示是，当我们有了目标，也去实践了（读书、和他人沟通学习），此时我们通过实际的体验、观察等感官活动获得了片面的，浅显的感性认识，后面还需要通过反复的实践、思考、分析，上升到理性认识层面，而这个阶段也是更重要的阶段。认识的真正任务在于经过感觉而到达于思维，到达于逐步了解客观事物内部的矛盾，了解它的规律性，了解不同过程间的内部联系，进而能去把握周围世界的发展。</p><h3 id="2-3-从感性认识到理性认识"><a href="#2-3-从感性认识到理性认识" class="headerlink" title="2.3 从感性认识到理性认识"></a>2.3 从感性认识到理性认识</h3><h4 id="2-3-1-识别矛盾"><a href="#2-3-1-识别矛盾" class="headerlink" title="2.3.1 识别矛盾"></a>2.3.1 识别矛盾</h4><p>识别矛盾是理解事物本质和推动发展的关键。在哲学中的矛盾指的是事物内部或外部相互对立的两方面，通过分析这些对立面之间的关系，我们可以揭示事物的内在规律和发展动力。以下是识别矛盾的几个方法：</p><h5 id="2-3-1-1-观察事物的对立面"><a href="#2-3-1-1-观察事物的对立面" class="headerlink" title="2.3.1.1 观察事物的对立面"></a>2.3.1.1 观察事物的对立面</h5><p>矛盾通常表现为事物的相互对立面，识别矛盾首先要能区分这些对立面的存在。例如：</p><ul><li><strong>属性对立</strong>：冷热、硬软、快慢等相互对立的属性是矛盾的表现。</li><li><strong>利益对立</strong>：在社会现象中，不同阶层、群体之间的利益冲突往往体现矛盾。</li><li><strong>力量对立：在物理现象中，向心力和离心力之间的相互作用也是一种矛盾。</strong></li></ul><h5 id="2-3-1-2-分析事物的发展变化"><a href="#2-3-1-2-分析事物的发展变化" class="headerlink" title="2.3.1.2 分析事物的发展变化"></a>2.3.1.2 分析事物的发展变化</h5><p>矛盾的运动推动事物的发展，因此通过分析事物的变化，可以发现矛盾。例如：</p><ul><li>一个事物在不同的阶段可能会表现出不同的状态，这些状态的转换往往是由矛盾推动的。</li><li>例如，一颗种子的成长过程蕴含了它与环境之间的矛盾。种子需要水分、阳光等，但环境条件可能并不总是充足，这种矛盾促使种子不断适应和改变。</li></ul><h5 id="2-3-1-3-对比事物的外部条件与内部需求"><a href="#2-3-1-3-对比事物的外部条件与内部需求" class="headerlink" title="2.3.1.3 对比事物的外部条件与内部需求"></a>2.3.1.3 对比事物的外部条件与内部需求</h5><p>外部条件和内部需求的不一致往往是矛盾产生的来源。例如：</p><ul><li>人类的需求（如物质或精神需求）与自然资源的有限性之间的冲突，反映了人类社会与自然之间的矛盾。</li><li>个人的欲望和社会规范之间的冲突，也是生活中的矛盾体现。</li></ul><h5 id="2-3-1-4-观察事物内部的统一性和对立性"><a href="#2-3-1-4-观察事物内部的统一性和对立性" class="headerlink" title="2.3.1.4 观察事物内部的统一性和对立性"></a>2.3.1.4 观察事物内部的统一性和对立性</h5><p>矛盾不仅存在于不同事物之间，也存在于同一事物的内部。事物内部的统一性和对立性共存，且对立双方相互依存。例如：</p><ul><li>一台机器既需要稳定运行，又需要灵活适应不同的工作环境。稳定与灵活在这里构成一种矛盾。</li><li>在个人心理层面，自尊心与自我批判的矛盾也是一个内在的冲突。</li></ul><h5 id="2-3-1-5-通过实践检验矛盾"><a href="#2-3-1-5-通过实践检验矛盾" class="headerlink" title="2.3.1.5 通过实践检验矛盾"></a>2.3.1.5 通过实践检验矛盾</h5><p>实践是检验认识和识别矛盾的重要途径。通过实际的操作和实践，可以更清晰地发现事物中的矛盾。例如：</p><ul><li>在工作中，如果某个目标难以实现，可以通过分析现实状况（如资源不足、时间紧迫等）来识别存在的矛盾。</li></ul><h5 id="2-3-1-6-从系统和整体的角度分析"><a href="#2-3-1-6-从系统和整体的角度分析" class="headerlink" title="2.3.1.6 从系统和整体的角度分析"></a>2.3.1.6 从系统和整体的角度分析</h5><p>事物往往是作为一个整体存在的，整体中的各部分可能相互依存又相互制约。识别矛盾时，需要考虑整体的系统性。</p><ul><li>例如，在一家公司中，不同部门之间可能存在工作目标的矛盾，而这些矛盾会影响公司的整体运作。因此，需要从整体角度去分析并平衡各部门之间的关系。</li></ul><p>识别矛盾的核心在于能够发现事物中的对立性和统一性，分析这些对立面的相互作用和变化。矛盾不仅是对立的存在，也是一种相互依存、相互作用的动态关系。通过仔细观察、分析、比较和实践，能够更好地理解和识别矛盾，为解决问题提供有效的理论和实践依据。</p><h4 id="2-3-2-分析矛盾"><a href="#2-3-2-分析矛盾" class="headerlink" title="2.3.2 分析矛盾"></a>2.3.2 分析矛盾</h4><p>分析矛盾是理解事物本质、揭示其发展规律的重要方法。通过分析矛盾，我们可以更深刻地认识事物的内部结构和动态变化。矛盾的分析包含几个步骤，从认识矛盾的基本特征，到具体理解其相互作用。以下是如何分析矛盾的详细步骤：</p><h5 id="2-3-2-1-区分主要矛盾和次要矛盾"><a href="#2-3-2-1-区分主要矛盾和次要矛盾" class="headerlink" title="2.3.2.1 区分主要矛盾和次要矛盾"></a>2.3.2.1 区分主要矛盾和次要矛盾</h5><ul><li><strong>主要矛盾</strong>是影响事物发展过程中起决定性作用的矛盾。它决定着事物的基本发展方向，解决主要矛盾是推动事物进步的关键。例如，国家发展中，经济发展可能是主要矛盾，而文化建设是次要矛盾。</li><li><strong>次要矛盾</strong>相对不那么重要，但仍会影响事物的局部或阶段性进程。在解决主要矛盾时，也不能忽视次要矛盾的作用。例如，个体生活中的健康问题可能是主要矛盾，而工作中的压力是次要矛盾，但两者相互影响。</li></ul><p><strong>分析要点</strong>：要分析哪些是事物发展中的主要矛盾，哪些是次要矛盾，区分轻重缓急，集中力量解决主要问题。</p><h5 id="2-3-2-2-分析矛盾的主要方面和次要方面"><a href="#2-3-2-2-分析矛盾的主要方面和次要方面" class="headerlink" title="2.3.2.2 分析矛盾的主要方面和次要方面"></a>2.3.2.2 分析矛盾的主要方面和次要方面</h5><p>每一个矛盾都有两个对立的方面，在具体矛盾中，这两个方面并不是平衡的，而是有一个方面占主导地位。</p><ul><li><strong>主要方面</strong>是矛盾中起主导、决定作用的一方。例如，在生产力与生产关系的矛盾中，生产力的状况往往决定了社会发展的基本水平。</li><li><strong>次要方面</strong>是相对服从和次要的一方。虽然它在特定情况下不起主导作用，但仍对事物有影响。</li></ul><p><strong>分析要点</strong>：确定矛盾的主要和次要方面，弄清哪一方在矛盾中占据主导地位，从而把握解决问题的方向。</p><h5 id="2-3-2-3-掌握矛盾的普遍性和特殊性"><a href="#2-3-2-3-掌握矛盾的普遍性和特殊性" class="headerlink" title="2.3.2.3 掌握矛盾的普遍性和特殊性"></a>2.3.2.3 掌握矛盾的普遍性和特殊性</h5><ul><li><strong>矛盾的普遍性</strong>：矛盾存在于一切事物中，并且存在于事物发展的各个阶段。任何事物都具有矛盾，因此分析矛盾是研究事物的普遍方法。</li><li><strong>矛盾的特殊性</strong>：不同事物、不同时期的矛盾有其特殊的表现形式。例如，社会中的阶级矛盾与企业管理中的利益矛盾表现形式不同。矛盾的解决需要针对具体情况采取相应的策略。</li></ul><p><strong>分析要点</strong>：既要认识到矛盾的普遍性，看到矛盾无处不在，同时也要具体分析矛盾的特殊性，避免千篇一律。</p><h5 id="2-3-2-4-分析矛盾双方的相互依存性和对立统一"><a href="#2-3-2-4-分析矛盾双方的相互依存性和对立统一" class="headerlink" title="2.3.2.4 分析矛盾双方的相互依存性和对立统一"></a>2.3.2.4 分析矛盾双方的相互依存性和对立统一</h5><p>矛盾双方虽然对立，但它们往往相互依存，共同存在。这种相互依存性是矛盾存在的基础。</p><ul><li><strong>对立性</strong>：矛盾双方相互排斥、对抗。例如，资本主义社会中的劳资矛盾，体现了对立的双方在利益上的冲突。</li><li><strong>统一性</strong>：矛盾双方又相互依存，没有矛盾的统一性，事物无法存在或发展。例如，生产力和生产关系之间虽然有矛盾，但它们又必须相互作用才能推动社会发展。</li></ul><p><strong>分析要点</strong>：理解矛盾的对立性和统一性，看到冲突的同时也要把握它们之间的依存关系。</p><h5 id="2-3-2-5-了解矛盾的转化"><a href="#2-3-2-5-了解矛盾的转化" class="headerlink" title="2.3.2.5 了解矛盾的转化"></a>2.3.2.5 了解矛盾的转化</h5><p>矛盾双方在特定条件下可以相互转化。例如，矛盾的主要方面和次要方面可以发生转换。</p><ul><li>矛盾的<strong>转化</strong>往往发生在一定条件下，当条件发生变化时，矛盾的主次方面可能发生转化，事物的性质随之改变。例如，在战争中，胜败的局势可能因为新的战略而发生反转。</li></ul><p><strong>分析要点</strong>：识别矛盾转化的条件，掌握事物变化的关键时刻，及时调整策略以应对新的矛盾形式。</p><h5 id="2-3-2-6-认识矛盾的复杂性"><a href="#2-3-2-6-认识矛盾的复杂性" class="headerlink" title="2.3.2.6 认识矛盾的复杂性"></a>2.3.2.6 认识矛盾的复杂性</h5><p>矛盾往往不是单一的，而是复杂多样的。在分析时，要注意矛盾的多层次性和多角度性。</p><ul><li><strong>多层次矛盾</strong>：一个事物内部可能存在多个矛盾，而这些矛盾之间相互交织。例如，企业的经营中，管理层与员工之间的矛盾，市场竞争中的矛盾，企业内部分配制度的矛盾，都可能交织在一起。</li><li><strong>多角度分析</strong>：同一个矛盾可以从不同的角度去分析，例如从经济、社会、文化、心理等不同层面理解。</li></ul><p><strong>分析要点</strong>：在分析矛盾时，不仅要关注单一矛盾，还要看到不同矛盾之间的相互影响，综合考虑问题。</p><h5 id="2-3-2-7-实践中的矛盾分析"><a href="#2-3-2-7-实践中的矛盾分析" class="headerlink" title="2.3.2.7 实践中的矛盾分析"></a>2.3.2.7 实践中的矛盾分析</h5><p>实践是验证矛盾分析的重要途径。通过实践，可以更直观地发现矛盾的表现和变化。</p><ul><li>通过实践检验我们的理论认识，及时发现新的矛盾或矛盾的新表现形式，进而调整我们的行动。</li></ul><p><strong>分析要点</strong>：在实践中不断检验和修正对矛盾的认识，避免单纯从理论出发，而忽视实际情况。</p><p>分析矛盾的核心在于把握其动态特性，既要认识到对立性，也要理解统一性，既要看到普遍性，也要把握特殊性。通过区分主要和次要矛盾，分析矛盾的主次方面及其转化，结合实践经验，我们可以更有效地理解和解决问题。在处理复杂问题时，矛盾分析是一种重要的辩证思维工具。</p><h4 id="2-3-3-找到主要矛盾是复杂问题分析的关键"><a href="#2-3-3-找到主要矛盾是复杂问题分析的关键" class="headerlink" title="2.3.3 找到主要矛盾是复杂问题分析的关键"></a>2.3.3 找到主要矛盾是复杂问题分析的关键</h4><p>找到主要矛盾是复杂问题分析的关键，事物的发展内部存在多种矛盾，只有抓住了主要矛盾，才能找到解决矛盾的关键方法。</p><p><strong>例子：胖子的主要矛盾是“吃的东西不够健康”还是“吃太多了”？</strong></p><blockquote><p>一个超级无敌肥胖症大胖子，他这么胖，是因为“吃的东西不够健康”？还是因为“吃太多了”？</p><p>诚然我们肯定还是倡导吃健康食品对减肥会更有帮助，但是5000大卡的炸鸡汉堡披萨薯条，替换成喝5000大卡蛋白粉，难道就能瘦了？</p><p>相反，许多瘦子，真的是鸡胸肉、西蓝花、紫薯、蛋白粉之类的“健康饮食”？还是照样吃“不健康”、“不干净”？只是吃得比较少？<br>比如常去吃洋快餐，但只吃一个汉堡就饱了，薯条、可乐啥的通通不要。</p><p>所以，在这里，“吃的东西不够健康”并非主要矛盾，<br>主要矛盾是“吃的太多又不消耗”。</p></blockquote><p>主要矛盾是影响某一事物发展进程的关键矛盾。</p><h4 id="2-3-4-如何找到主要矛盾呢？"><a href="#2-3-4-如何找到主要矛盾呢？" class="headerlink" title="2.3.4 如何找到主要矛盾呢？"></a>2.3.4 如何找到主要矛盾呢？</h4><ol><li>善于把具体问题追到根源上思考（系统化思考、结构化思考，第一性原理）</li><li>善于把局部问题放在整体中思考（空间）</li><li>善于把当前问题放在过程中思考（时间）</li></ol><h5 id="2-3-4-1-把具体问题追到根源上思考"><a href="#2-3-4-1-把具体问题追到根源上思考" class="headerlink" title="2.3.4.1 把具体问题追到根源上思考"></a>2.3.4.1 把具体问题追到根源上思考</h5><p>对应典型的方法论：<a href="https://mp.weixin.qq.com/s/LlBDEPi7poVp8-1UqWQQQ">5Whys分析法</a>、<a href="https://mp.weixin.qq.com/s/Fl9GaolB0sdqwoSHByfnQ">U型思考</a>、<a href="https://mp.weixin.qq.com/s/1GwopYPVE1BX4WOO1OCvbQ">第一性原理</a>等。</p><blockquote><p>有一个博物馆有一面墙比别的墙面腐蚀的严重的多，每年都要重新粉刷。<br>这个问题，需要你去解决，你会怎么做？</p><p>当然先来分析原因，为啥腐蚀的厉害啊？<br>一问才发现原来是清洁人员清洁墙面的时候用腐蚀性特别强的清洁剂导致的，于是你就想：“简单，换腐蚀性弱一点的清洁剂就解决了。”</p><p>你想想这样对么？你会不会好奇为啥只有这一面墙这样，别的墙不这样啊？<br>于是问自己几个why就可以深入下去。</p><p>为什么要用高腐蚀度的清洁剂？<br>因为这面墙上经常粘着很多鸟粪，用一般的清洁剂洗不干净。</p><p>那为什么这面墙上有很多鸟粪？<br>因为墙上有很多蜘蛛，而这些鸟以蜘蛛为食，所以经常在墙附近活动。</p><p>那为什么墙上有很多蜘蛛？<br>因为墙上有很多小虫子，而蜘蛛来吃这些小虫子。</p><p>为什么墙上有很多小虫子？<br>因为墙上有几扇窗子，晚上博物馆里的光会从这里透出去，而这些趋光性很强的虫子就被光吸引过来了。</p><p>所以解决方案是：<br>在窗户那里安装遮光性很强的厚窗帘，每天太阳落山之前拉上窗帘。</p></blockquote><h5 id="2-3-4-2-把局部问题放在整体中思考"><a href="#2-3-4-2-把局部问题放在整体中思考" class="headerlink" title="2.3.4.2 把局部问题放在整体中思考"></a>2.3.4.2 把局部问题放在整体中思考</h5><p>比如：信用卡这个金融产品，开卡有一堆的好处，甚至免年费，还有一堆优惠活动羊毛可以薅，那银行为啥还大力推广呢？</p><p>按照<a href="http://pdf.dfcfw.com/pdf/H3AP2018060411520205741.pdf">信用卡行业报告数据</a>，2017年，几个主要银行的信用卡收入情况如下：</p><ul><li>招行信用卡业务利息收入 395.38 亿元，非息收入 149.13 亿元；</li><li>中信银行利息收入 85.01 亿元，非息收入 286 亿元；</li><li>浦发和光大分别实现 487.51 和 280 亿元业务收入；</li><li>民生银行披露其信用卡手续费及佣金收入 213.83 亿元。</li></ul><p>显然，局部看起来信用卡是亏本的，整体上，信用卡是盈利巨大的。</p><h5 id="2-3-4-3-把当前问题放在过程中思考"><a href="#2-3-4-3-把当前问题放在过程中思考" class="headerlink" title="2.3.4.3 把当前问题放在过程中思考"></a>2.3.4.3 把当前问题放在过程中思考</h5><p>我们看看抗日统一战线形成的这个历史过程。</p><p>1935年12月27日的《论反对日本帝国主义的策略》教员这篇文章里，教员根据鸦片战争以来的中国历史和国内各个阶层的诉求，觉察到红军的任务已由打蒋介石，变成了联合国民党和更多阶层一起打日本，搞统一战线。主要矛盾由打蒋介石变成打日本鬼子，以及由此形成的统一战线思路。</p><p>背景：当时的中央红军加上陕北刘志丹的部队也就1万多人，和当时的各路军阀数十万部队和日本军队相比，简直是九牛一毛，所以必须团结多数，打击少数。</p><ul><li>1935年到1936年的教员文章，基本都是教员和国民党上层人物的通信内容，内容都是争取统一战线打日本。</li><li>1935年12月，教员抓住主要矛盾，形成统一战线思路。</li><li>1936年，全年都在致信给国民党政要，搞统一战线。</li><li>1936年12月，西安事变发生，大的统一战线形成。</li></ul><p>结果：1945年，抗战打赢，我军由抗战前的红一，红二，红四方面军的3万人发展到抗战后的100万人，在军事人数上，由弱变强。</p><p>这就是教员抓主要矛盾能力的演化时间轴，看完只能默默的说两个字，佩服。</p><p>战略是一个逻辑渐进的过程，是长时间内所做的许多小型决策的结果。反过来，当前问题应该在时间长河，历史过程中有价值体现。</p><h3 id="2-4-用实践检验理性认识"><a href="#2-4-用实践检验理性认识" class="headerlink" title="2.4 用实践检验理性认识"></a>2.4 用实践检验理性认识</h3><p>有了初步的认知后，最重要的是要去实践中认识和总结，<strong>实践是检验真理的唯一标准</strong>。</p><p>比如：开店的主要矛盾是啥？餐饮人有下面的总结：</p><p><strong>起步阶段：老板能力的缺乏和店面需要步入正轨的矛盾，或者是老板学习能力的缺乏和店面成长之间的矛盾。</strong></p><p>主要是人的问题。老板是最不希望自己的店死掉的，但小店却往往死在自己能力的不足上。</p><p>这个阶段需要解决的是老板个人能力问题，善于学习和成长的老板，生意也会跟着成长。这种情况是相当普遍的，大部分转让的店都是因为老板人不行。</p><p><strong>第二阶段：店面盈利的要求和营业额却日渐萎缩的矛盾</strong></p><p>这也是很多店面的处境，应该说，这是一个店生命周期的外在表现，生命周期表现在万事万物上，都会经历导入期，成长期，成熟期，衰退期，如果什么都不做，再火爆的店都会慢慢陨落。</p><p>这个时候，需要解决的如何延长一个店的生命周期，这就需要产品和模式的不断创新，以及持续的营销活动。</p><p>因为新的价值不断输出，老顾客越来越忠诚，新顾客不断加入，盈利自然会稳定。</p><p><strong>第三阶段：生意扩张和模式落后的矛盾。</strong></p><p>生意未必都可以做大，区别就在于运营模式和盈利模式。</p><p>极少数人能把生意做大，而且持续盈利，一定来源于模式的优越性。</p><p>很多店一个店时活得不错，于是急于扩张，刚开始就倒下了，这时候最重要的不是老板的能力问题，更多的是店面本身不具备扩张的基础，简单的规模扩张不意味着销量的提高和盈利的增强，这就是残酷的商业规律对老板的野心开的玩笑。</p><p>以上是做餐饮人的总结，但是实际效果如何，必须亲自去实践，纸上谈兵是拿不到结果的。</p><h3 id="2-5-认识和实践是螺旋上升的"><a href="#2-5-认识和实践是螺旋上升的" class="headerlink" title="2.5 认识和实践是螺旋上升的"></a>2.5 认识和实践是螺旋上升的</h3><p>《实践论》指出：我们对事物的认识从实践开始，经过实践得到了理论的知识，还须再回到实践中去。认识绝非一次所能完成的，难免犯错，需要再实践、再认识。</p><p><strong>通过实践而发现真理，又通过实践而证实真理和发展真理</strong>”。</p><p>因此，实践和认识是在循环中前进的，是螺旋式上升的。</p><p>在我们日常生活中，每个人都面临着不止一对矛盾，有工作上的、身体上的、学习上的、感情上的，但必定有一对矛盾起着领导作用，另外的矛盾则被领导、被支配。</p><blockquote><p>邻居小A，人到中年，工作上压力巨大，薪资微薄，这是一对矛盾。</p><p>由于加班熬夜，身体长期处于亚健康状态，这是一对矛盾。</p><p>平时还偶尔和妻子吵架拌嘴，感情不和，这算得上是第三对矛盾。</p></blockquote><p>哪对矛盾是主要矛盾呢？</p><p>就要看哪对矛盾在起决定性作用，</p><blockquote><p>如果身体有恙是因为拿不出钱去保养治疗，<br>和妻子吵架是因为家庭开销大、入不敷出，<br>那么很显然，工作上的矛盾就是主要矛盾，小A要把注意力放在工作上，争取多赚点钱。</p></blockquote><p>钱的问题解决了，另外两对矛盾也就迎刃而解了。</p><p>这个认知过程是需要自己不断迭代，不断提升的，实践带来认知的提升，认知的提升带着去实践，它们两个是螺旋交替上升的。</p><p><strong>这里贴一下《矛盾论》，不了解的可以看下</strong>：</p><blockquote><p>事物的矛盾法则，即对立统一法则，是唯物辩证法的最根本的法则。辩证唯物法主要探讨的问题：两种宇宙观；矛盾的普遍性；矛盾的特殊性；主要的矛盾和主要的矛盾方面；矛盾诸方面的同一性和斗争性；对抗在矛盾中的地位。弄懂了这些问题，就在根本上弄懂了唯物辩证法。</p><p><strong>两种宇宙观</strong></p><ol><li>形而上学宇宙观：就是用孤立的、静止的和片面的观点去看世界。</li><li>辩证法宇宙观：主要地就是教导人们要善于去管擦和分析各种事物的矛盾的运动，并根据这种分析，指出解决矛盾的方法。</li></ol><p><strong>矛盾的普遍性</strong></p><p>矛盾的普遍性或绝对性：矛盾存在于一切事物的发展过程中；每一事物的发展过程中存在着自始至终的矛盾运动。</p><p><strong>矛盾的特殊性</strong></p><p>矛盾的特殊性：各种物质运动形式中的矛盾，都带特殊性。</p><p>不论研究何种矛盾的特性——各个物质形式的矛盾，各个运动形式在各个发展过程中的矛盾，各个发展过程的矛盾的各个方面，各个发展过程在各个发展阶段上的矛盾以及各个发展阶段上的矛盾的各个方面，研究所有这些矛盾的特性，都不能带主观随意性，必须对它们实行具体的分析。离开具体的分析，就不能认识任何矛盾的特性。我们必须时刻记得列宁的话：对于具体的事物做出具体的分析。</p><p><strong>矛盾的普遍性和特殊性的关系</strong></p><p>人类总是由认识个别的和特殊的事物，逐步扩大到认识一般的事物。当人们已经认识了这种共同的的本质以后，就以这种共同的认识为指导，继续地向着尚未研究过的或者尚未深入地研究过的各种具体的事物进行研究，找出其特殊的本质，这样才可以补充、丰富和发展这种共同的本质的认识，而使这种共同的本质的认识不致变成枯的和僵死的东西。</p><p>这就是认识的两个过程：一个是由特殊到一般，一个是由一般到特殊。人类的认识总是这样循环往复的进行的，而每一次的循环都可能使人类的认识提高一步，使人类的认识不断深化。</p><p>由于特殊的事物是和普遍的事物联结的，由于每一个事物内部不但包含了矛盾的特殊性，而且包含了事物的普遍性，普遍性即存在于特殊性之中，所以，当着我们研究一定事物的时候，就应当去发现这两方面极其联结，发现一事物和它以外的许多事物的互相联结。</p><p><strong>主要的矛盾和主要的矛盾方面</strong></p><p>在矛盾的特殊性问题中，还有两种情形必须特别地提出来加以分析，这就是主要矛盾和主要的矛盾方面。</p><p>在复杂的事物发展过程中，有许多的矛盾存在，其中必有一种使主要的矛盾，由于它的存在和发展规定或影响着其他矛盾的存在和发展。因此，研究任何过程，如果存在着两个以上矛盾的复杂过程的话，就要用全力找出它的主要矛盾。捉住了这个主要矛盾，一切问题就迎刃而解了。</p><p>矛盾着的两方面中，必有一方面使主要的，另一方面使次要的。其主要的方面，即所谓矛盾起主导作用的方面。事物的性质，主要地使由取得支配地位的矛盾的主要方面所规定的。</p><p><strong>矛盾诸方面的同一性和斗争性</strong></p><p>同一性、统一性、一致性、互相渗透、互相贯通、互相依赖（或依存）、互相联结或互相合作，这些不同的名词都是一个意思，说的是如下两种情形；第一，事物发展过程中的每一种矛盾的两个方面，各以和它对立着的方面为自己存在的前提，双方共处于一个统一体中；第二，矛盾着的双方，依据一定的条件，各向着相反的方面转化。这些就是所谓同一性。</p><p>一切过程都有始有终，一切过程都转化为它们对立物。一切过程的常驻性使相对的，但是一种过程转化为他种过程的这种变动性则是绝对的。</p><p>两个相反的东西中间由同一性，所以二者能够共处于一个统一体中，又能够互相转化，这是说的条件性，即是说在一定条件之下，矛盾的东西能够统一起来，又能够互相转化；五次一定条件，就不能成为矛盾，不能共居，也不能转化。由于一定的条件才能构成矛盾的同一性，所以说同一性是有条件的、相对的。这里我们又说，矛盾的斗争贯串于过程的始终，并使一过程向着他过程转化，矛盾的斗争无所不在，所以说矛盾的斗争性是无条件的、绝对的。</p><p>有条件的相对的同一性和无条件的绝对的斗争性相结合，构成了一切事物的矛盾运动。</p><p><strong>对抗在矛盾中的地位</strong></p><p>对抗是矛盾斗争的一种形式，而不是矛盾斗争的一切形式。</p><p><strong>结论</strong></p><p>事物的矛盾法则，即对立统一的法则，是自然和社会的根本法则，因而也是思维的根本法则。它是和形而上学的宇宙观相反的。按照辩证唯物论的观点来看，矛盾存在于一切客观事物和主观思维的过程中，矛盾贯串于一切过程的始终，这是矛盾的普遍性和绝对性。矛盾着的事物极其每一个侧面各有其特点，这是矛盾的特殊性和相对性，矛盾着的事物依一定的条件有同一性，因此能够共居于一个统一体中，又能互相转化到相反的方面去，这又是矛盾的特殊性和相对性。然而矛盾的斗争则是不断的，不管在它们共居的时候，或者在它们互相转化的时候，都有斗争的存在，尤其是在它们互相转化的时候，斗争的表现更为显著，这又是矛盾的普遍性和绝对性。当着我们研究矛盾的特殊性和相对性的时候，要注意矛盾和矛盾方面的主要的和非主要的区别；当着我们研究矛盾的普遍性和斗争性的时候，要注意矛盾的各种不同的斗争形式的区别。</p></blockquote><h2 id="三、辩证唯物在解决具体问题上的应用"><a href="#三、辩证唯物在解决具体问题上的应用" class="headerlink" title="三、辩证唯物在解决具体问题上的应用"></a>三、辩证唯物在解决具体问题上的应用</h2><ol><li>第一步，首先是实践，从实践中获得一些浅显的、片面的感性认识。</li><li>第二步，是做足够多的实践（具体标准因人而异），从足够多的实践中获得充足的感性认识。</li><li>第三步，透过足够多的感性认识，识别、分析、抓住事物的主要矛盾。</li><li>第四步，在抓住事物的主要矛盾之后可以有两种运用方式，一种是提出矛盾的解决方案，另一种是基于主要矛盾做出科学的决策。</li><li>第五步，回到实践中检验自己的理性认识。检验什么？如果自己的目的是解决矛盾，则一个是检验自己的解决方案能否解决自己抓住的主要矛盾。另一个是检验自己抓住的主要矛盾是否真的是事物的主要矛盾。如果自己的目的是更好的做出决策，则是检验自己基于主要矛盾做出的决策是否科学有效。</li><li>第六步，重复第一步到第五步的过程，直到达成目标或者自己的问题被根本性的解决。</li></ol><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20241007114958.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/haxianhe/pic/master/image/20241006165850.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、战略上运用主观唯心的哲学思想&quot;&gt;&lt;a href=&quot;#一、战略上运</summary>
      
    
    
    
    <category term="认知到位" scheme="https://blog.haxianhe.com/categories/%E8%AE%A4%E7%9F%A5%E5%88%B0%E4%BD%8D/"/>
    
    
    <category term="认知到位" scheme="https://blog.haxianhe.com/tags/%E8%AE%A4%E7%9F%A5%E5%88%B0%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>关于做自己</title>
    <link href="https://blog.haxianhe.com/2024/09/21/think/%E5%85%B3%E4%BA%8E%E5%81%9A%E8%87%AA%E5%B7%B1/"/>
    <id>https://blog.haxianhe.com/2024/09/21/think/%E5%85%B3%E4%BA%8E%E5%81%9A%E8%87%AA%E5%B7%B1/</id>
    <published>2024-09-21T07:00:00.000Z</published>
    <updated>2024-09-21T08:42:16.466Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新自己的博客了，看了下，上次更新还是在24年1月23号。</p><p>过去的这大半年，经历了很多事情，思考了很多，自己也有很大的成长，现在想做下做下总结，记录下来。</p><h2 id="做自己"><a href="#做自己" class="headerlink" title="做自己"></a>做自己</h2><p>第一个话题，也是这篇文章的核心“关于做自己”，这么多年来一直有人在我的耳边和我说“做自己”这三个字，我也一直在想，什么是做自己，是给自己花钱是做自己？还是放纵自己是做自己？到底怎么才能做自己？这个问题困扰了我很久很久，以前一直想不明白，为什么别人那么容易就能做到的事情到了我这里这么难？想不明白为什么我越努力，越懂事，甚至做的远超出自己当初的期待，最后却这么痛苦，这么纠结，这么内耗，问题到底出现在哪里？</p><p>在回答这个问题之前，先来回顾下我之前写的一篇博客<a href="https://blog.haxianhe.com/2020/01/14/book-notes/book-notes-psycholog/%E8%87%AA%E6%8E%A7%E5%8A%9B/">如何自控 - 读《自控力》</a> ,这是一篇关于《自控力》这本书的读后感，这本书对我启发还蛮大的，比如：</p><ul><li>人的大脑分为原始本能（本我）、自我意识（自我）、自控系统（超我）</li></ul><p>根据弗洛伊德的理论，我由本我、自我、超我三部分组成，其中：</p><ol><li><strong>本我</strong>，即潜意识、<strong>动物本能</strong>，位于眼眶后面区域的杏仁体周围，3岁之前形成。</li><li><strong>超我</strong>，即道德层面的自我、<strong>自控系统</strong>，位于大脑皮层区域，有意识之后后天养成。</li><li><strong>自我</strong>，由超我意识和潜意识融合而成，形成的<strong>自我意识</strong>。</li></ol><p>一直以来，我都以为不能做自己的人的问题出在了自我意识上，是由于超我和本我的割裂导致自我意识没有很好的形成导致的。最近发现其实问题可能出现在自控系统上了，先来回顾下自控系统的构成：</p><p><strong>自控系统（意志力）</strong>主要由 <strong>我要做、我不要、我想要</strong> 组成。三种意志力类型概括了自控系统的三个核心方面，每一个方面对应着不同的自我控制需求。</p><p>这三者相互关联，共同构成了完整的自控系统。例如，当你在做某个决定时，可能需要结合“我要做”和“我不要”来推动自己采取行动或抑制冲动，而“我想要”则会为你提供强大的内在动力和方向感。</p><p>之前，我一直认为自己是具备“我想要”这个能力的，但是最近忽然想明白了，那真的是“我想要”吗？</p><p>引用一段自己在微博写的话：</p><blockquote><p>其实从 18 年开始我就一直希望自己身上有个“靠谱”的标签（一方面是泽康身上的人格魅力吸引了我，另一方面是党哥给我一种感觉，沉稳的人更有未来），这些年我也是一直往这个方向努力的。但是最近忽然意识到有没有一种可能我天性就不是那种踏踏实实的性子，我就是一个很自由的人，我就是想一出是一出，我就是胆子大，脸皮厚，无所畏惧，敢于尝试。</p></blockquote><p>仔细数数从进工作组，到带项目，到去实习，到毕业找工作，到第一次跳槽，到第二次跳槽。哪一次也不是我有把握之后才去做的，都是“勇敢”在前面跑，“实力”在后面追。基于我够卷，够小心的性格，每次挑战也都有惊无险的度过了。也许这就是我的人格特质，真的不好吗？好像也没有那么不好，只是不符合主流价值观罢了，大家小时候都喜欢乖孩子，长大了都希望男人沉稳点，但是 why？ 这就是我啊！我为什么要为了别人的眼光舍弃自己的长处，选择自己的短处。</p><blockquote></blockquote><p>写到这里我心里已经有答案了，原来我一直非常非常在意别人的看法，我希望家里人为我骄傲，所以我明明一年级以前那么调皮，那么“不乖”，但是自从上了二年级以后就仿佛变了一个人，再也不会因为和别的小朋友打架别人家长找到了家里，再也不会欺负别的小朋友，虽然还是不写作业但是我每次考试都要考第一第二，开始想着如何不让父母为我担心，开始“听”父母的话，开始“懂事”，去迎合父母的喜欢去做事情。从那个时候起，“我”就已经离我远去了。</p><blockquote></blockquote><p>每个好朋友都和我说过一句“做自己”，今天我忽然意识到，也许“我”不是这一段两段感情中丢的，而是过去二十多年的家庭生活和校园生活中丢的。事情都有它的两面性，这种中式教育给了我一个更高的起点，但是如今当我作为一个独立的人进入社会之后，它限制了我去过的幸福，走向更高更远的地方。所以是时候找回“自我”了，毕竟这个社会衡量一个人看的不是他的短处有多短，而是看他的长处有多长，一个没有特点的人，不会被任何人看见包括他自己。</p><p>我好像一直想要活成一个“对”的人，而不是活我自己。但是世间的事哪有什么对与错呀。可怜、可悲、可叹！！！</p><p>再举个例子，我曾无数次尝试规划自己一天的24小时，精确到分，规划每天要做的每一个todo，再用图表去汇总展示，调整后续的计划。每次刚开始确实，效率拉满，但是用不上一周整个人就接近崩溃的状态，会极度的自责，会责怪自己，明明规划的那么好，为什么就做不到？就不能像一个机器人一样去执行吗？</p><p>对，我就是这样，想要让自己去做“对”的事情，从来没有考虑“我想要”什么，也从来不能从当下体会到快乐。</p><p>其实写到这里就很清楚了，<strong>我没有做自己的问题不是出现在自我意识这块，而是出现在自控系统这块，我的自控系统只有“我要做”、“我不要”，而没有“我想要”这部分</strong>。</p><p>当我意识到这个问题之后，我开始发现，原来人不是一定要去做点什么才有意义，才可以开心快乐，如果我这会儿没有想做的事情，那就什么都不做，就那么呆着就好了，也可以很舒服。</p><p><strong>以前的我就像鲨鱼一样，活着的意义就在于去做点什么，要是什么都不做，就会无法呼吸，就会死</strong>。</p><p>比如，此刻，<strong>我想要</strong>把这段时间的感悟写下来，写到我的博客里，发到我的个人公众号上，所以我就会去做，而不是因为今天是周六，也不是因为我很长时间没有更新我的博客了所以我要去怎么怎么样。我们是人，我们要有自己的思想，我们要有想要做的事情，仅此而已。</p><h2 id="关于思考"><a href="#关于思考" class="headerlink" title="关于思考"></a>关于思考</h2><p>其实这个问题的本质也是没有“做自己”导致的，这里重新整理下自己的思路。</p><p>这件事情最开始让我眼前一亮是源于几个月前朋友的一句话，当时她说：“哈哈，你用三个词形容一下xxx（另一个朋友）”，我靠，我当时人都傻了，那一瞬间我整个人仿佛被雷击中了一样，大脑瞬间死机，因为我从来没有去想过别人是怎样的人，我仿佛是一个游荡在世间的NPC。那让我意识到，原来我一直没有思考，既没有思考人，也没有思考事。</p><p>从那以后我开始逐个的盘我身边的人，包括很多已经不在身边的人是什么样的人，他们有什么特点等等。盘的过程中就发现，原来有些人从最开始就不是一路人，原来有些人自己没有被自己善待，原来某些人值得被自己更好的对待，是可以做一辈子的好朋友，很多事情一下子就清晰了起来。</p><p>关于事情的思考也类似，这里就不展开了。</p><h2 id="人生的意义"><a href="#人生的意义" class="headerlink" title="人生的意义"></a>人生的意义</h2><p>这个话题有点大哈，这里就随便聊聊。</p><p>先扣一下文章的主题“做自己”，<strong>如果一个人都不是从“我想要”出发去活着的，那他也不存在什么人生意义，因为他从未活过</strong>，就是一具游荡在世间的尸体罢了。</p><p>人如果要追寻生命的意义，那么前提他得是一个完整的人。进而他就会在自己与这个世界交互的过程中，做很多关于自己、关于这个世界的思考，也就是<strong>通过认识自己来认识世界，也通过认识世界来认识自己</strong>。<strong>也就形成了他的人生观、世界观，进而也就形成了他的价值观。</strong></p><p>最后，想明白上面那些内容之后再去看这个世界，会感觉这个世界只有两种人，一种是自我觉醒了的人，一种是自我没有觉醒的人。怎么样都可以，毕竟这个五彩斑斓的世界这么大，容得下千奇百怪的我们。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没有更新自己的博客了，看了下，上次更新还是在24年1月23号。&lt;/p&gt;
&lt;p&gt;过去的这大半年，经历了很多事情，思考了很多，自己也有很大的成长，现在想做下做下总结，记录下来。&lt;/p&gt;
&lt;h2 id=&quot;做自己&quot;&gt;&lt;a href=&quot;#做自己&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="认知到位" scheme="https://blog.haxianhe.com/categories/%E8%AE%A4%E7%9F%A5%E5%88%B0%E4%BD%8D/"/>
    
    
    <category term="认知到位" scheme="https://blog.haxianhe.com/tags/%E8%AE%A4%E7%9F%A5%E5%88%B0%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>软着陆-读《八次危机》</title>
    <link href="https://blog.haxianhe.com/2024/01/23/book-notes/book-notes-economic/%E5%85%AB%E6%AC%A1%E5%8D%B1%E6%9C%BA/"/>
    <id>https://blog.haxianhe.com/2024/01/23/book-notes/book-notes-economic/%E5%85%AB%E6%AC%A1%E5%8D%B1%E6%9C%BA/</id>
    <published>2024-01-23T01:00:00.000Z</published>
    <updated>2024-01-23T01:40:18.516Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20240123085707.png"></p><h2 id="一、序言"><a href="#一、序言" class="headerlink" title="一、序言"></a>一、序言</h2><p>《八次危机》的作者是中国人民大学院长、学者温铁军的一本书，关于这个人我印象比较深刻的是他有关“三农”问题的见解，主张城市反哺农村，提升农村消费，发挥好农村蓄水池的功效等等。</p><p>《八次危机》这本书主要是23年读的，但是当时剩了点没读完，于24年开年读完了，读完之后简单整理一下笔记。</p><p>除了温老的这本《八次危机》，还有相关《解构现代化》、《置身事内》等两本和中国当代经济相关的书籍要阅读。</p><p>以下内容是我读完这本书学到的知识。</p><h2 id="二、中等收入陷阱"><a href="#二、中等收入陷阱" class="headerlink" title="二、中等收入陷阱"></a>二、中等收入陷阱</h2><p>一个国家，如果人均自然资源有限，而且工业发展不充分，它便会滞留于<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E4%B8%8D%E5%8F%91%E8%BE%BE%E5%9B%BD%E5%AE%B6">低收入国家</a>之列，落入<a href="https://zh.wikipedia.org/wiki/%E8%B4%AB%E5%9B%B0%E9%99%B7%E9%98%B1">贫困陷阱</a>。</p><p>类似的，若该国人均自然资源丰富，但是工业发展不充分，则落入<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%BA%90%E8%A9%9B%E5%92%92">资源陷阱</a>。假如该国的各方面优势都差不多，它就会被夹在中等收入当中，因此中等收入陷阱是较为普遍的发展陷阱<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%AD%89%E6%94%B6%E5%85%A5%E9%99%B7%E9%98%B1#cite_note-1">[1]</a>。</p><p>中等收入陷阱，一般指一个国家的经济高速增长，并在人均GDP达到中等收入水准后，发展陷入停滞状态。这个问题通常发生在发展中经济体发现自己卡在劳动力成本上涨和成本竞争力下降的中间，既无法与高技能<a href="https://zh.wikipedia.org/wiki/%E5%88%9B%E6%96%B0">创新</a>的先进经济体竞争，又无法与低收入低工资的经济体在廉价生产制成品上相竞争。</p><p>关于发展陷阱的两个观点：</p><ol><li>后发国家如果真要以发达国家作为“赶超”目标和样板，就不得不考虑是否具有以同样条件“复制”其发展历程的可能；如果没有复制条件，则发达国家的发展经验没有普遍意义。</li><li>核心国家应对全球危机仍将延续既往有效地向其他国家转嫁成本的制度路径。这是一般后发国家堕入发展陷阱的成因。</li></ol><h2 id="三、从外资外债视角解析“中国经验”"><a href="#三、从外资外债视角解析“中国经验”" class="headerlink" title="三、从外资外债视角解析“中国经验”"></a>三、从外资外债视角解析“中国经验”</h2><p>一方面它被中国政府在资本短缺时期作为推动经济发展和政策调整的重要工具；另一方面，它又是加剧国家对外负债导致其后数年内经济困境的始作俑者。</p><p>基于发展中国家当工业化的国际比较</p><ol><li>战后发展中国家的工业化路径：对内剥削+对外负债</li><li>中国经验的特殊性在于外资和外援中缀后国内的工业化进程没有中断</li></ol><p>主要靠内向型积累，边推进工业化原始积累，变还债。这就是60年代的“艰苦奋斗”。</p><p>中国依托国内的二元结构（因城乡差别而客观上形成的城乡二院结构）来为弱化经济周期性波动而向农村转移危机成本。</p><h2 id="四、中国周期性经济危机的政治经济学分析"><a href="#四、中国周期性经济危机的政治经济学分析" class="headerlink" title="四、中国周期性经济危机的政治经济学分析"></a>四、中国周期性经济危机的政治经济学分析</h2><p>传统政治经济学理论认为：产业资本阶段的根本矛盾是社会化大生产和生产资料私人占有制之间的矛盾；社会主要矛盾是生产能力的相对过剩与民众购买能力相对下降之间的矛盾。这种传统理论认为明显的生产能力过剩始现于1998年，此后中国发生的经济危机仍然应该是内生性的。</p><p>本书认为，1997-1998年和2008-2009年的两次经济危机，从发生机制来看，都属于中国20世纪90年代中期转向外向型经济为主之后由外部因素诱发的“输入型”危机。</p><p>1997 - 1998年以前中国的工业化进程中发生的六次经济危机，其主因与一般后发工业化国家相同，都是内生性的资本短缺。</p><p>经济危机发生时，无论主观偏好如何，中国事实上可以依托其城乡二元结构的基本体制矛盾来分散转移各种经济和社会成本。总体上维持了工业化进程不中断。</p><p>危机发生时对城市乃至工业化进程和社会发展的冲击有多大，取决于城市多大程度上能将危机成本向农村和农民转嫁。</p><p>凡是能向农村直接转嫁危机代价的，产业资本集中的城市工业就可以实现“软着陆”，原有体制也就得以维持；凡事不能向农村直接转嫁的危机，就在城市“硬着陆”，也就导致了国家财税制度乃至经济体制的重大变革。</p><p>从整体的社会稳定来看，“三农”对于城市中国的产业资本危机的“化危为机”（60年来，特别是30年改革期间，已经发生过的周期性经济危机平均起来大约10年一次）起了重要的载体作用。</p><p>这应该是中国历经多次周期性经济危机而都“幸免于发展陷阱之难”的内因之一。</p><h2 id="五、从危机化解视角思考中国发展的可持续性"><a href="#五、从危机化解视角思考中国发展的可持续性" class="headerlink" title="五、从危机化解视角思考中国发展的可持续性"></a>五、从危机化解视角思考中国发展的可持续性</h2><p>近年来的宏观环境新变化：</p><ol><li>资本过剩条件下中央政府政策调整为“亲民生”</li><li>“发展主义”导向下的地方政府过于依赖资源环境难以真正“以人为本”</li></ol><p>农村社会经济条件的新变化：</p><ol><li>后税费时代“草根”农村自我发展能力弱化</li><li>“草尖”离农倾向使从村内部化处理外部风险的功能弱化</li></ol><p>书中建议将新世纪第二个10年的政策重点放在：</p><ol><li>主动放弃过去中国处于资本极度稀缺、数量型粗放增长时期的政策思路，注重中央政府已经进入资本过剩阶段的长期结构调整，特别是要以中央政府掌握的垄断金融为基础，自上而下地组建能够统筹县以下新农村建设和城镇化（双轮驱动）的基本建设投资机构。</li><li>在国家投资方向从“排次性”向“包容性”的可持续发展调整的大前提下，最关键的步骤是进一步深化以“组织创新、制度创新”为内涵的农村综合体制改革。</li></ol><p>此外，书中还具体介绍了1958-1976工业化初期的三次危机极其外资外债背景、1978-1997改革以来三次内源性经济危机极其化解、1997和2008年中国两次“输入型”危机的发生、应对和影响。</p><p>这本书对于了解中国当代经济很有帮助，推荐大家阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/haxianhe/pic/master/image/20240123085707.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、序言&quot;&gt;&lt;a href=&quot;#一、序言&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://blog.haxianhe.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="经济学" scheme="https://blog.haxianhe.com/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用theme出现报错</title>
    <link href="https://blog.haxianhe.com/2024/01/18/cs-newcomer/cs-newcomer-environment/hexo%E4%BD%BF%E7%94%A8next%E6%8A%A5%E9%94%99/"/>
    <id>https://blog.haxianhe.com/2024/01/18/cs-newcomer/cs-newcomer-environment/hexo%E4%BD%BF%E7%94%A8next%E6%8A%A5%E9%94%99/</id>
    <published>2024-01-17T19:09:10.000Z</published>
    <updated>2024-01-17T19:28:16.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo使用theme出现“ &#123;% extends ‘_layout.swig‘ %&#125; &#123;% <span class="keyword">import</span> ‘_macro/post.swig‘ as post_template %&#125;“问题</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="新人入门" scheme="https://blog.haxianhe.com/categories/%E6%96%B0%E4%BA%BA%E5%85%A5%E9%97%A8/"/>
    
    <category term="环境问题" scheme="https://blog.haxianhe.com/categories/%E6%96%B0%E4%BA%BA%E5%85%A5%E9%97%A8/%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="环境问题" scheme="https://blog.haxianhe.com/tags/%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>如何做好监控告警</title>
    <link href="https://blog.haxianhe.com/2024/01/15/cs-skill/cs-skill-online/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/"/>
    <id>https://blog.haxianhe.com/2024/01/15/cs-skill/cs-skill-online/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/</id>
    <published>2024-01-15T04:00:00.000Z</published>
    <updated>2024-01-17T18:13:45.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么要做监控告警"><a href="#一、为什么要做监控告警" class="headerlink" title="一、为什么要做监控告警"></a>一、为什么要做监控告警</h2><blockquote><p>“你说说，没有仪表盘的车，你敢开吗？”<br>“没有仪表盘的车开在路上，你怎么知道现在是什么情况？”<br>“客户说你这车又蹦了，咋知道什么时候好的？啥时候出的问题？”</p></blockquote><p>将思考转换到现实的软件系统中，可想而知没有监控系统的情况下，也就是没有“仪表盘”的情况下实在太可怕了。</p><p>你的故障永远都是你的客户告诉你的，而…在什么时候发生的，你也无法确定，只能通过客户反馈倒退时间节点，最后从错误日志中得到相对完整的日志信息。</p><p>更要命的是你无法掌握主动权，错误日志有可能会有人漏记录，平均修复时间（MTTR）更不用想了，需要从 0.1 开始定位，先看 APP是哪个模块报错，再猜测是哪个服务导致，再打开链路追踪系统，或是日志平台等。</p><p>稍微复杂点的，排查来来往往基本都是半小时、一小时以上，那4 个 9 肯定是达不到的了，一次 P0 几小时怕不是绩效也凉凉，因为故障修复的速度实在是太慢了。</p><p>那归根结底，想破局怎么办？核心第一步就是把监控告警给建设好。</p><h2 id="二、监控与报警的目标是什么"><a href="#二、监控与报警的目标是什么" class="headerlink" title="二、监控与报警的目标是什么"></a>二、监控与报警的目标是什么</h2><p>简单说，<strong>监控的核心目标就是要解决好两个问题：其一，什么东西出故障了。其二，为什么它出故障了，根因在哪里。</strong></p><p>一个监控与报警的系统（简称监控系统），在于它可以让一个业务系统在发生故障时主动通知我们，或者告诉我们即将发生什么。当系统无法自动修复这个问题时，通过报警引导 SRE 人工来介入。SRE 首先判断目前是否真实存在某个故障，如果存在故障则采取手段来消除故障，解决故障后最终还要找出导致故障的根源问题，并推动各方去彻底解决掉它，避免未来出现类似的问题。</p><p>一个初级的监控系统是比较好做的。我们坚持不懈地往里面加各种监控项，系统看起来越来越完善。很多人会由此而感觉到了满足。但是，一个有 “完善的监控项” 的监控系统，是不是就是一个好的监控系统了？这当然不是。<strong>要做好监控，我们一定要分清楚什么是现象，而什么是原因</strong>。</p><p><strong>某个监控项不正常了，“某个东西出故障了”，这只是一种现象（Symptom）。但这个监控项 “为什么出问题” 了，则是原因。我们找到的原因，也可能只是中间原因，而不是根因（Root Cause）。</strong></p><p>在一个复杂系统中，某一个服务的现象可能是另外一个服务的原因。例如，数据库性能问题。数据库读操作很缓慢是数据库 SRE 角度检测到的一个现象。然而，对前端业务的 SRE 来说，他们看到的是网站缓慢这个现象，而数据库读操作的缓慢则是原因。当然数据库慢只是一个中间原因，它还无法对应到一个明确的动作，<strong>但这对缩小问题定位范围已经产生了巨大作用</strong>。</p><p><strong>一个完善的监控系统，并不是 “报警很多很完善” 的系统，而是 “信噪比高，有故障就报警，有报警就直指根因” 的监控系统。</strong></p><p><strong>“信噪比高”关注的是误报率问题</strong>。我们不应该仅仅因为 “某东西看起来有点问题” 就发出报警。报警处理会占用员工的宝贵时间。如果该员工正在工作时间段，该报警的处理会打断他原本的工作。如果该员工正在家，该报警的处理则会影响他的个人生活，甚至是把他从睡眠中叫醒。当报警出现得太频繁时，员工就会进入“狼来了” 效应，怀疑报警的有效性甚至忽略报警。有的时候在报警过多的时候，甚至会忽略掉真实发生的故障。由于无效信息太多，分析和修复可能会变慢，故障时间也会相应延长。高效的报警系统应该提供足够的信息，并且误报率非常低。</p><p><strong>“有故障就报警” 关注的是报警的覆盖率</strong>。如果我们通过客户报障或其他手段发现故障，对于监控系统来说，就应该认为是一次监控事故。</p><p><strong>“有报警就直指根因” 关注的是报警的有效性和排障的效率</strong>。一个初级的监控系统，往往很容易产生的报障现象是，线上发生一个故障会同时会产生大量的报警，这些报警杂乱无章，接警人看到一堆报警后，并没有有效的信息指引他如何快速消除故障，并找到故障的根本原因。</p><h2 id="三、监控服务"><a href="#三、监控服务" class="headerlink" title="三、监控服务"></a>三、监控服务</h2><h3 id="3-1-日志：监控与报警的基础"><a href="#3-1-日志：监控与报警的基础" class="headerlink" title="3.1. 日志：监控与报警的基础"></a>3.1. 日志：监控与报警的基础</h3><p>一个现代化的监控与报警系统，最底层往往基于一个日志系统。什么是日志？它不局限于业务服务输出的程序日志，实际上更多的数据来源是各种系统指标的采集。简单说，凡是时序相关的、持续产生的数据，都可以称之为日志。</p><p>原始的日志有可能是结构化的，也可能是非结构化的。如果是非结构化的数据，那这就需要先经过文本解析过程进行结构化。结构化后的日志存储系统，本质上就是一个时序数据库。</p><p>日志通过收集、结构化、清洗等步骤后，就可以对外提供日志分析和检索服务。分析和检索的结果可以直接提供数据结果，也可以用报表形式呈现，或者在满足特定条件下触发报警。</p><p>采用时序数据库来做监控系统的好处是，不依赖特定的脚本来判断系统是否正常工作，而是依赖一种标准数据分析模型进行报警。这就使得批量、大规模、低成本的数据收集变得可能。</p><p>收集回来的数据可以同时用来渲染图表和报警。报警规则往往用简单的数学表达式形式表达。这样，数据收集过程就不再是一个短暂的一次性过程，所有收集回来的历史数据都可以被用来作为报警规则的计算因素。</p><p>不同监控规则产生的报警（alert）可能有不同的优先级，比如紧急状态和一般状态。紧急状态的报警通常意味着已经产生或即将产生用户可见的影响，需要立刻介入处理。而一般状态则可以延迟到第二天再处理。报警的目标对象不一定是某个人，而可能是某个系统，比如工单。</p><p>当然，监控一个指标并不一定是出于报警的考虑。它还可以有各种原因，如下：</p><ul><li>分析长期趋势。例如每日活跃用户的数量，以及数量增长的速度。</li><li>跨时间范围的比较，或者是观察 AB 测试组之间的区别。例如，增加新节点后，memcache 的缓存命中率是否增加？网站是否比上周速度要慢？使用 A 方案和 B 方案哪个更有助于用户的活跃？</li><li>临时性的回溯分析，即在线调试。例如，我们网站的请求延迟刚刚大幅增加了，有没有其他的现象同时发生？</li></ul><h2 id="四、添加监控项"><a href="#四、添加监控项" class="headerlink" title="四、添加监控项"></a>四、添加监控项</h2><p>搭建好了监控系统，收集上来了监控数据，我们第一件事情就是添加监控项。不得不承认，它是监控与报警系统中最难的一件事情。我们都需要注意些什么呢？</p><h3 id="4-1-三大类监控项"><a href="#4-1-三大类监控项" class="headerlink" title="4.1. 三大类监控项"></a>4.1. 三大类监控项</h3><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20240118021233.png"></p><ul><li>业务逻辑：项目所对应的服务其承担的业务逻辑，通常需要对其进行度量。例如：每秒的下单数等。</li><li>应用程序：应用程序。</li><li>硬件资源：服务器资源情况等。</li></ul><h3 id="4-2-四个黄金指标"><a href="#4-2-四个黄金指标" class="headerlink" title="4.2. 四个黄金指标"></a>4.2. 四个黄金指标</h3><p><strong>监控系统的 4 个黄金指标分别是：延迟、流量、错误和饱和度。</strong></p><p><strong>延迟，也就是服务处理某个请求所需要的时间</strong>。延迟指标区分成功请求和失败请求很有必要。例如，某个由于数据库连接丢失或者其他后端问题造成的 HTTP 500 错误可能延迟很低。在计算总体延迟时，如果将 HTTP 500 回复的延迟也计算在内的话，可能会产生误导性的结果。但是，“慢” 错误要比 “快” 错误更糟！极少量的慢错误请求就可能导致系统吞吐能力的大幅降低。因此，监控错误回复的延迟是很重要的。</p><p><strong>流量，是系统负载的度量方式</strong>。通常我们会使用某个高层次的指标来度量，比如 IOPS、每秒交易量等。不同的业务系统的流量指标有较大差别。例如，对于普通 Web 服务器来说，该指标通常是每秒 HTTP 请求量（IOPS），同时可能按请求类型分类（静态请求与动态请求）。对于音频流媒体系统来说，这个指标可能是网络 I&#x2F;O 速率，或者并发会话数量。针对键值存储系统来说，指标可能是每秒交易数量，或每秒的读取操作数量。</p><p><strong>错误，也就是请求失败的数量</strong>。请求失败的表现很多样。最简单的当然是显式失败，例如 HTTP 回复 500 状态码。还有的请求可能是隐式失败，例如 HTTP 回复虽然是 200，但回复内容中提示出现了错误。还有一种是策略原因导致的失败。例如，如果我们要求回复在 1s 内发出，任何超过 1s 的请求就都认为是失败请求。</p><p><strong>饱和度（Saturation），它度量的是服务容量有多 “满”</strong>。通常是系统中目前最为受限的某种资源的某个具体指标的度量。比如，在内存受限的系统中，即为内存的使用率；在 I&#x2F;O 受限的系统中，即为 I&#x2F;O 的使用率。要注意，很多系统在达到 100% 利用率之前性能就会严重下降，增加一个利用率目标也是非常重要的。</p><p>饱和度是最需要进行预测的指标。比如，一个典型的预测是：“看起来数据库会在 5 个小时内填满硬盘”。</p><p>在复杂系统中，饱和度可以配合其他高层次的负载度量来使用。例如，该服务是否可以正常处理两倍的流量，是否可以应对 10% 的额外流量？这些是 SRE 面临的非常现实的容量规划上的问题。</p><p>为什么我们需要做负载测试，也是为了评判服务的饱和度，究竟受何种度量指标的影响。大部分服务都习惯使用某种间接指标，例如 CPU 利用率，或者网络带宽等来评判饱和度，因为这些指标通常有一个固定的已知的上限。</p><p>延迟增加是饱和度的前导现象。所以 99% 的请求延迟（在某一个小的时间范围内，例如五分钟）可以作为一个饱和度早期预警的指标。</p><p>如果已经成功度量了这四个黄金指标，且在某个指标出现故障时能够发出告警(或者快要发生故障)，那么在服务的监控层面来讲，基本也就满足了初步的监控诉求。也就是可以做到知道了是什么出问题，问题出在哪里，单这一步就已经提高了不少定位问题的时间效率，是一个从 0 到 1 的起步阶段。</p><h3 id="4-3-监控指标"><a href="#4-3-监控指标" class="headerlink" title="4.3. 监控指标"></a>4.3. 监控指标</h3><p>结合三大类监控项和四个黄金指标规划整个系统的度量指标。可以划分出如下几种类型：</p><ul><li>业务服务<ul><li>延迟，P995</li><li>流量，QPS</li><li>错误，异常码</li></ul></li><li>应用程序<ul><li>延迟，P995</li><li>流量，QPS</li><li>错误，异常码</li></ul></li><li>系统层面&#x2F;语言层面<ul><li>延迟，P995</li><li>流量，QPS</li><li>饱和度，百分比</li></ul></li></ul><h2 id="五、配置报警"><a href="#五、配置报警" class="headerlink" title="五、配置报警"></a>五、配置报警</h2><p>在完成监控指标和体系的建设后，告警如何做，成为了一大难题，再好的监控体系，闭环做不好，就无法发挥出很大的作用。当我们打算为监控系统增加新规则时，在心中回答以下问题：</p><ul><li>该规则是否能够检测到一个目前检测不到的、紧急的、有操作性的，即将发生或者已经发生的用户可见故障？</li><li>是否可以忽略这条报警？是否还有其他人也会收到这条报警？</li><li>这条报警是否确实显示了用户正在受到影响？是否存在用户没有受到影响也可以触发这条规则的情况？例如，系统维护状态下发出的报警是否应该被过滤掉。</li><li>收到报警后，是否要进行某个操作？是否需要立即执行该操作，还是可以等到第二天早上再进行？该操作是否可以被安全地自动化？</li><li>该操作的效果是长期的，还是短期的？</li></ul><p>以上这些问题其实反映了在报警上的深层次的理念：</p><ul><li>每当收到紧急状态的报警时，应该立即需要我进行某种操作。每天只能进入紧急状态几次，太多就会导致“狼来了”效应。</li><li>每个紧急状态的报警都应该是可以具体操作的。</li><li>每个紧急状态的报警的处理都应该需要某种智力分析过程。如果某个报警只是需要一个固定的机械化动作，那么它就应该被自动化。</li><li>每个紧急状态的报警都应该是关于某个新问题的，不应该彼此重叠。</li></ul><h2 id="六、故障响应"><a href="#六、故障响应" class="headerlink" title="六、故障响应"></a>六、故障响应</h2><p>接到报警我们应该怎么做？</p><p>接警后的第一哲学，是尽快消除故障。找根因不是第一位的。如果故障原因未知，我们可以尽量地保留现场，方便故障消除后进行事故的根因分析。</p><p>每一个监控项的报警应该尽可能代表一个清晰的故障场景。这会极大改善监控的有效性，直指根因，消除故障自然也就更快速。</p><p>虽然越少越好，但是不清楚故障原因的报警是难以避免的，否则我们的报警就难以完整覆盖所有的故障。比如，对于业务服务的入口级的故障，我们怎么也得报出来。每发生一次新的入口级的故障场景，我们就有必要把这个故障场景独立出来，这样下一次出现同类故障时我们就能够直接定位到根因了。</p><p>一般来说，有清晰的故障场景的监控报警，都应该有故障恢复的预案。而在那些故障原因不清晰的情况下，消除故障的最简方法是基于流量调度，它可以迅速把用户请求从故障域切走，同时保留了故障现场。</p><p>解决了线上的故障，我们就要开始做故障的根因分析，找到问题发生的源头。</p><p>这主要仰仗两种分析方法。</p><p>一种是看看同时间段下，除了我们的故障现象外，还有那些异常现象同时发生了。如果我们的监控数据足够全面，这种分析方法可以很快地定位到 “怀疑对象”。</p><p>另一种方式是分析故障请求的调用链。这方面的技术已经非常成熟。很多公司的业务实现都会把请求从前端入口到后端的整个调用过程通过一个 request id 串起来。</p><p>通过随机抽样一些故障请求的日志，然后在日志系统中搜索 request id 找到整个调用链，分析调用链找到问题的根源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、为什么要做监控告警&quot;&gt;&lt;a href=&quot;#一、为什么要做监控告警&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要做监控告警&quot;&gt;&lt;/a&gt;一、为什么要做监控告警&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“你说说，没有仪表盘的车，你敢开吗？”&lt;b</summary>
      
    
    
    
    <category term="专业技能" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E6%8A%80%E8%83%BD/"/>
    
    <category term="业务治理" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E6%8A%80%E8%83%BD/%E4%B8%9A%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
    
    <category term="业务治理" scheme="https://blog.haxianhe.com/tags/%E4%B8%9A%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>0005最长回文子串</title>
    <link href="https://blog.haxianhe.com/2024/01/14/cs-basic/cs-basic-basic/cs-basic-basic-algorithm/0005%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://blog.haxianhe.com/2024/01/14/cs-basic/cs-basic-basic/cs-basic-basic-algorithm/0005%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2024-01-14T04:00:00.000Z</published>
    <updated>2024-01-17T18:26:46.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;babad&quot;</span></span><br><span class="line">输出：<span class="string">&quot;bab&quot;</span></span><br><span class="line">解释：<span class="string">&quot;aba&quot;</span> 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">输出：<span class="string">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 1000</li><li>s 仅由数字和英文字母组成</li></ul><p>Related Topics</p><ul><li>字符串</li><li>动态规划</li></ul><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>本题最容易想到的一种方法应该就是 中心扩散法。中心扩散法怎么去找回文串？</p><p>从每一个位置出发，向两边扩散即可。遇到不是回文的时候结束。</p><p>举个例子，str&#x3D;acdbbdaa 我们需要寻找从第一个 b（位置为 3）出发最长回文串为多少。怎么寻找？</p><ul><li><p>首先往左寻找与当期位置相同的字符，直到遇到不相等为止。</p></li><li><p>然后往右寻找与当期位置相同的字符，直到遇到不相等为止。</p></li><li><p>最后左右双向扩散，直到左和右不相等。如下图所示：</p></li></ul><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20240116232946.png"></p><p>每个位置向两边扩散都会出现一个窗口大小（len）。如果 len&gt;maxLen(用来表示最长回文串的长度）。则更新 maxLen 的值。</p><p>因为我们最后要返回的是具体子串，而不是长度，因此，还需要记录一下 maxLen 时的起始位置（maxStart），即此时还要 maxStart&#x3D;len。</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">strLen</span> <span class="operator">=</span> s.length();</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxStart</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strLen; i++) &#123;</span><br><span class="line">                left = i - <span class="number">1</span>;</span><br><span class="line">                right = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) == s.charAt(i)) &#123;</span><br><span class="line">                    len++;</span><br><span class="line">                    left--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (right &lt; strLen &amp;&amp; s.charAt(right) == s.charAt(i)) &#123;</span><br><span class="line">                    len++;</span><br><span class="line">                    right++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; strLen &amp;&amp; s.charAt(right) == s.charAt(left)) &#123;</span><br><span class="line">                    len = len + <span class="number">2</span>;</span><br><span class="line">                    left--;</span><br><span class="line">                    right++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (len &gt; maxLen) &#123;</span><br><span class="line">                    maxLen = len;</span><br><span class="line">                    maxStart = left;</span><br><span class="line">                &#125;</span><br><span class="line">                len = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s.substring(maxStart + <span class="number">1</span>, maxStart + maxLen + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、题目&quot;&gt;&lt;a href=&quot;#一、题目&quot; class=&quot;headerlink&quot; title=&quot;一、题目&quot;&gt;&lt;/a&gt;一、题目&lt;/h2&gt;&lt;p&gt;给你一个字符串 s，找到 s 中最长的回文子串。&lt;/p&gt;
&lt;p&gt;如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</summary>
      
    
    
    
    <category term="专业知识" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    <category term="计算机基础" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="数据结构和算法" scheme="https://blog.haxianhe.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2023 年终总结</title>
    <link href="https://blog.haxianhe.com/2024/01/01/summary/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.haxianhe.com/2024/01/01/summary/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-31T16:00:01.000Z</published>
    <updated>2024-01-24T23:53:45.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、工作"><a href="#一、工作" class="headerlink" title="一、工作"></a>一、工作</h2><p>工作上今年从快手支付来了美团推荐，职级上升了半级，薪资也涨了30%。</p><p>工作强度，现在团队比之前团队小很多，每天8点就能下班了。</p><p>核心矛盾：因为没有打算长期在北京发展，所以不具备通过熬资历成为嫡系的条件。</p><p>后面还是要赶紧找机会去杭州，最好是能拿到一个P7的职级或者30%的涨薪，然后长期在那个团队发展，成为老板的嫡系。</p><h2 id="二、潜力"><a href="#二、潜力" class="headerlink" title="二、潜力"></a>二、潜力</h2><p>今年面试了很多次，总体来说还是基本功不扎实，浪费了很多机会，所以这块是2024年的重点内容，甚至某种程度上比换工作到杭州更重要。</p><p>主要是集中专业知识、专业技能这两块。</p><p>专业知识：精通团队相关技术，总结中间件技术原理，汇总各类面试技术题。 </p><ul><li>算法</li><li>设计模式</li><li>Java</li><li>Spring</li><li>MySQL</li><li>Redis</li><li>RocketMQ&#x2F;Kafka</li></ul><p>专业技能：沉淀、总结技术工作方法论。</p><ul><li>开发能力<ul><li>常见故障总结</li><li>Java问题诊断方法论与实践</li><li>系统性能优化</li><li>稳定性治理</li></ul></li><li>架构能力<ul><li>三高系统设计</li></ul></li><li>业务运维<ul><li>质量运营方法与实践</li></ul></li></ul><h2 id="三-、爱好"><a href="#三-、爱好" class="headerlink" title="三 、爱好"></a>三 、爱好</h2><h3 id="3-1-读书"><a href="#3-1-读书" class="headerlink" title="3.1.读书"></a>3.1.读书</h3><p>今年应该没读几本书吧，</p><ul><li>《戒掉恋爱脑》</li></ul><p>2024年读书以自我管理、心理学、经济学、社会学为主。</p><h3 id="3-2-健身"><a href="#3-2-健身" class="headerlink" title="3.2.健身"></a>3.2.健身</h3><p>2023年整体健身进度不及预期，身体素质大幅下降。</p><h3 id="3-3-旅行"><a href="#3-3-旅行" class="headerlink" title="3.3.旅行"></a>3.3.旅行</h3><p>2023年旅行六次：<br>《秦皇岛·阿那亚》<br>《陕西·大同》<br>《海南》<br>《云南》<br>《东北》<br>《香港跨年》</p><h3 id="3-4-写作"><a href="#3-4-写作" class="headerlink" title="3.4.写作"></a>3.4.写作</h3><p>2023年写了一篇面试总结的文章：<br>《<a href="https://blog.haxianhe.com/2023/08/01/cs-interview/interview2023/">面试总结-2023版</a>》</p><h2 id="四、23-年目标回顾"><a href="#四、23-年目标回顾" class="headerlink" title="四、23 年目标回顾"></a>四、23 年目标回顾</h2><ul><li>工作<ul><li>工作上由于 22 年财年调整导致自己不满足时间要求，不能参与晋升。不过下半年换工作来了美团，职级升了半级，薪资涨了 30%，不比晋升差。</li><li>《程序员练级攻略》和《leetcode》其实想表达的是练好基本功，今年换工作期间面试反复碰壁，基本功还是不扎实。</li></ul></li><li>爱好<ul><li>读书：今年计划读书 12 本，实际只读了一本《戒掉恋爱脑》，核心问题还是恋爱后失去了自我。但是自己的问题终究要自己去面对，所以 24 年应该在读书上有所调整。</li><li>健身：今年计划健身 52 次，实际远远达不到这个标准。</li><li>旅行：计划去两个没去过的省市，实际去了 4 个地方，玩好了，但是每次旅行可以沉淀更多的内容。</li></ul></li></ul><h2 id="五、24-年目标"><a href="#五、24-年目标" class="headerlink" title="五、24 年目标"></a>五、24 年目标</h2><ul><li>工作：拿到一个base 杭州、P7&#x2F;2-2 职级、30% 涨薪、AI 相关的高质量 offer。</li><li>潜力<ul><li>专业知识：精通团队相关技术，总结中间件技术原理，汇总各类面试技术题。 </li><li>专业技能：沉淀、总结技术工作方法论。</li><li>业务思考：养成有好奇心，会主动思考业务的习惯。结合“干了多少活，犯了多少错，主动做了多少事”去思考，了解现有业务情况，明确未来业务目标，思考自己在其中能做什么。</li></ul></li><li>爱好<ul><li>读书：24 年计划读书 12 本</li><li>健身：去健身房 48 次</li><li>旅行（摄影）：去一次国外旅行</li><li>写作：在运营自己的博客体系基础上，新增加两个小红书账号的运营，一个用于记录专业知识+专业技能+业务思考+面试晋升，一个用于记录自己的日常生活。</li></ul></li></ul><h2 id="六、个人-Milestone"><a href="#六、个人-Milestone" class="headerlink" title="六、个人 Milestone"></a>六、个人 Milestone</h2><p>今年换了工作，从快手支付来了美团推荐。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、工作&quot;&gt;&lt;a href=&quot;#一、工作&quot; class=&quot;headerlink&quot; title=&quot;一、工作&quot;&gt;&lt;/a&gt;一、工作&lt;/h2&gt;&lt;p&gt;工作上今年从快手支付来了美团推荐，职级上升了半级，薪资也涨了30%。&lt;/p&gt;
&lt;p&gt;工作强度，现在团队比之前团队小很多，每天</summary>
      
    
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>面试总结-2023版</title>
    <link href="https://blog.haxianhe.com/2023/08/01/cs-interview/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-2023%E7%89%88/"/>
    <id>https://blog.haxianhe.com/2023/08/01/cs-interview/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-2023%E7%89%88/</id>
    <published>2023-08-01T07:00:00.000Z</published>
    <updated>2024-01-17T18:09:17.479Z</updated>
    
    <content type="html"><![CDATA[<p>本文受众主要为，互联网技术研发人员。</p><p>技术面试一般三面和HRBP面不太会卡人，主要都是停在了一面和二面上。我这次换工作前期主要是一面通过率比较低，后面主要是二面通过低。</p><p>总结影响面试通过的几点因素：</p><ol><li>是否真的招人（招几个人）</li><li>业务匹配度（谁都想招个有经验的）</li><li>面试得分（择优录取）</li></ol><p>此外，面试有的时候真的很看眼缘，看缘分，所以心态放平和，多面试，多总结，总会有offer的。</p><h2 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h2><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol><li><p>自我介绍（1-5分钟）<br>了解过往工作经历，对候选人初步了解。</p></li><li><p>聊一下项目（20分钟）<br>1、 项目的整体介绍，所负责的内容，承担的角色<br>2、根据简历内容进行提问，挖掘候选人优秀的一面<br>3、有哪些挑战与困难，如何解决的。<br>4、做完这个项目在哪方面有提高，收获了什么。是否有不足的地方，是否有改进计划</p></li><li><p>基础知识（10-15分钟）<br>常见面试题汇总（持续更新）</p></li><li><p>算法（20分钟）<br>控制在20分钟左右，不出hard级别的，主要考察思维能力、代码整洁度、代码的时间复杂度、空间复杂度&#x3D;</p></li><li><p>设计题（3-5分钟）<br>2年以内，可以出简单的一些设计题，<br>3-10年的可以出一些比较复杂的设计题，主要考察一下候选人的架构与设计能力。</p></li><li><p>问答环节（1-5分钟）<br>询问候选人是否有问题，予以解答</p></li></ol><h3 id="二、三面"><a href="#二、三面" class="headerlink" title="二、三面"></a>二、三面</h3><ol><li><p>自我介绍（1-5分钟）<br>了解过往工作经历，对候选人初步了解。</p></li><li><p>聊一下项目（40分钟）<br>1、 项目的整体介绍，所负责的内容，承担的角色<br>2、根据简历内容进行提问，挖掘候选人优秀的一面<br>3、有哪些挑战与困难，如何解决的。<br>4、做完这个项目在哪方面有提高，收获了什么。是否有不足的地方，是否有改进计划<br>5、结合项目问一些技术原理性的问题，考察候选人技术深度。<br>6、结合项目问一些业务标准解决方案，考察候选人技术广度。</p></li><li><p>问答环节（1-5分钟）<br>询问候选人是否有问题，予以解答</p></li></ol><h3 id="HRBP面"><a href="#HRBP面" class="headerlink" title="HRBP面"></a>HRBP面</h3><ol><li><p>自我介绍（1-5分钟）<br>了解过往工作经历，对候选人初步了解。</p></li><li><p>综合问题（20分钟）<br>从素质文化层面考察候选人，了解候选人是否适合团队，能否长期为公司服务等。</p></li><li><p>问答环节（1-5分钟）<br>询问候选人是否有问题，予以解答</p></li></ol><h3 id="薪资沟通"><a href="#薪资沟通" class="headerlink" title="薪资沟通"></a>薪资沟通</h3><p>todo</p><h2 id="如何写简历"><a href="#如何写简历" class="headerlink" title="如何写简历"></a>如何写简历</h2><p>这部分我推荐一篇阮一峰的文章给大家</p><ul><li><a href="https://www.ruanyifeng.com/blog/2020/01/technical-resume.html">如何写一份有效的技术简历？</a></li></ul><p>我这里简单给大家总结一下，有需要的人去看具体的文章内容。</p><ul><li>以项目为主体，设计你的简历</li><li>针对企业的需要，突出你的技能</li><li>项目的三要素（项目 &#x3D; 产品 + 技术 + 结果）</li><li>化你的项目，给出数字</li></ul><p>推荐一个制作简历的网站：</p><ul><li><a href="https://www.wondercv.com/">超级简历 https://www.wondercv.com/</a></li></ul><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>3分钟左右</p><p>模版：打招呼+基本信息+工作经历+工作成果+个人优势+表达期望+谢谢</p><ol><li>基本信息：姓名+毕业年份+毕业学校+专业</li><li>工作经历：不要罗列！把和JD更契合的放前面重点说明。和JD关系不大但是是之前工作重点简单提一下，和JD无关的不说，HR也不太想知道。</li><li>工作成功：重点说明自己在以往工作中做出的贡献，取得的成绩或成果。</li><li>个人优势：挑1-2个关键词，最好是JD中有提及过的，说明自己的优势。</li><li>表达期望：自己更该岗位的匹配度，以及希望可以通过面试一起共事。</li></ol><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>在面试时，经过寒暄后，一般面试官会让介绍项目经验，常见的问法是：“说下你最近的（或最拿得出手的）一个项目”。</p><p><strong>在面试前准备项目介绍，别害怕，因为面试官什么都不知道</strong></p><p>面试官是人，不是神，拿到你的简历的时候，是没法核实你的项目细节的。</p><p>更何况，你做的项目是以月为单位算的，而面试官最多用3分钟来从你的简历上了解你的项目经验，所以你对项目的熟悉程度要远远超过面试官，所以你一点也不用紧张。</p><p>如果你的工作经验比面试官还丰富的话，甚至还可以控制整个面试流程。</p><p>下面给出了你和面试官的情况对比：</p><table><thead><tr><th></th><th>你</th><th>面试官</th></tr></thead><tbody><tr><td>对你以前的项目和技能</td><td>很了解</td><td>只能听你说，只能根据你说的内容做出判断</td></tr><tr><td>在面试过程中的职责</td><td>在很短的时间内防守成功即可</td><td>如果找不出漏洞，就只能算你以前做过</td></tr><tr><td>准备时间</td><td>面试前你有充足的时间准备</td><td>一般在面试前用3分钟阅读你的简历</td></tr><tr><td>沟通过程</td><td>你可以出错，但别出关键性的错误</td><td>不会太为难你，除非你太差</td></tr><tr><td>技巧</td><td>你有足够的技巧，也可以从网上找到足够多的面试题</td><td>其实就问些通用的有规律的问题</td></tr></tbody></table><p>既然面试官无法了解你的底细，那么他们怎么来验证你的项目经验和技术？</p><p>下面总结了一些常用的提问方式：</p><table><thead><tr><th>提问方式</th><th>目的</th></tr></thead><tbody><tr><td>让你描述工作经验和项目（极有可能是最近的），看看你说的是否和简历上一致</td><td>看你是否真的做过这些项目</td></tr><tr><td>看你简历上项目里用到的技术，比如框架、数据库，然后针对这些技术提些基本问题</td><td>还是验证你是否做过项目，同时看你是否了解这些技术，为进一步提问做准备</td></tr><tr><td>针对某个项目，不断深入地问一些技术上的问题，或者从不同侧面问一些技术实现，看你前后回答里面是否有矛盾</td><td>深入核实你的项目细节</td></tr><tr><td>针对某技术，问些项目里一定会遇到的问题，比如候选人说做过数据库，那么就会问索引方面的问题</td><td>通过这类问题，核实候选人是否真的有过项目经验（或者还仅仅是学习经验）</td></tr></tbody></table><p><strong>准备项目的各种细节，一旦被问倒了，就说明你没做过</strong></p><p> 一般来说，在面试前，大家应当准备项目描述的说辞，自信些，因为这部分你说了算，流利些，因为你经过充分准备后，可以知道你要说些什么。</p><p>不少人是拘泥于“项目里做了什么业务，以及代码实现的细节”，这就相当于把后继提问权直接交给面试官。</p><p>下表列出了一些不好的回答方式：</p><table><thead><tr><th>回答方式</th><th>后果</th></tr></thead><tbody><tr><td>我在XX软件公司做了XX门户网站项目，这个项目做到了XX功能，具体是XX和XX模块，各模块做了XX功能，客户是XX，最后这个项目挣了XX钱</td><td>直接打断，因为业务需求我不需要了解，我会直接问他项目里的技术</td></tr><tr><td>（需要招聘一个Java后端开发，会Spring MVC）最近一个项目我是用C#（或其他非Java技术）实现的，实现了……或者我最近做的不是开发，而是测试……或者我最近的项目没有用到Spring MVC</td><td>提问，你最近用到SSH技术的项目是什么时候，然后在评语上写：最近XX时间没接触过SSH</td></tr><tr><td>在毕业设计的时候（或者在读书的时候，在学习的时候，在XX培训学校，在XX实训课程中），……</td><td>直接打断，提问你这个是否是商业项目，如果不是，你有没有其他的商业经验。如果没商业项目经验，除非是校招，否则就直接结束面试</td></tr><tr><td>描述项目时，一些关键要素（比如公司、时间、所用技术等）和简历上的不匹配</td><td>我们会深究这个不一致的情况，如果是简历造假，那么可能直接中断面试，如果真的是笔误，那么就需要提供合理的解释</td></tr></tbody></table><p>在避免上述不好的回答的同时，大家可以按下表所给出的要素准备项目介绍。</p><table><thead><tr><th>要素</th><th>样式</th></tr></thead><tbody><tr><td>控制在1分钟里面，讲出项目基本情况，比如项目名称，背景，给哪个客户做，完成了基本的事情，做了多久，项目规模多大，用到哪些技术，数据库用什么，然后酌情简单说一下模块。重点突出背景，技术，数据库和其他和技术有关的信息。</td><td>我在XX公司做了XX外汇保证金交易平台，客户是XX银行，主要完成了挂盘，实盘成交，保证金杠杆成交等功能，数据库是Oracle，前台用到JS等技术，后台用到Java的SSH，几个人做了X个月。不需要详细描述各功能模块，不需要说太多和业务有关但和技术无关的。如果面试官感兴趣，等他问。</td></tr><tr><td>要主动说出你做了哪些事情，这部分的描述一定需要和你的技术背景一致。</td><td>我做了外汇实盘交易系统，挂单成交系统，XXX模块，做了X个月</td></tr><tr><td>描述你在项目里的角色</td><td>我主要是做了开发，但在开发前，我在项目经理的带领下参与了业务调研，数据库设计等工作，后期我参与了测试和部署工作。</td></tr><tr><td>可以描述用到的技术细节，特别是你用到的技术细节，这部分尤其要注意，你说出口的，一定要知道，因为面试官后面就根据这个问的。你如果做了5个模块，宁可只说你能熟练说上口的2个。</td><td>用到了Java里面的集合，JDBC，…等技术，用到了Spring MVC等框架，用技术连接数据库。</td></tr><tr><td>这部分你风险自己承担，如果可以，不露声色说出一些热门的要素，比如Linux，大数据，大访问压力等。但一旦你说了，面试官就会直接问细节。</td><td>这个系统里，部署在Linux上，每天要处理的数据量是XX，要求是在4小时，1G内存是的情况下处理完5千万条数据。平均访客是每分钟XXX。</td></tr></tbody></table><h3 id="线上问题"><a href="#线上问题" class="headerlink" title="线上问题"></a>线上问题</h3><p>大家平时工作中一定要 <strong>把握住出现“线上问题”的机会。</strong> </p><p>因为，功能做了只是具备了项目经验，但是面试的时候真正“值钱”的其实是技术的难点与解决方案，而一般技术难点普遍伴随着“线上问题”。所以，平时工作中积极主动点，出现了线上问题不管是不是自己的都去查、去解决，事后围绕着“问题现象、问题分析、问题影响、解决方案、问题扩展”等去总结、记录到自己的笔记总，后续都是自己最宝贵的财富。</p><h3 id="技术亮点"><a href="#技术亮点" class="headerlink" title="技术亮点"></a>技术亮点</h3><p>结合自己遇到过的线上问题，优先准备分布式组件方面的技术亮点，常用的分布式组件主要有 MySQL、Redis、RocketMQ&#x2F;Kafka、ES等。</p><p>这部分内容可以参考JD上对技术要求，有针对性的去准备。</p><h2 id="技术问题"><a href="#技术问题" class="headerlink" title="技术问题"></a>技术问题</h2><p>这部分后续我会做两方面的总结：</p><ol><li>技术核心原理</li><li>面试高频问题及答案</li></ol><p>先简单列一下这里的知识框架</p><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p><strong>Java</strong></p><ul><li>Java 基础<ul><li>概述</li><li>基础语法</li><li>面向对象</li><li>常用类</li><li>异常处理</li><li>I&#x2F;O</li><li>序列化</li><li>泛型</li><li>注解</li><li>反射</li><li>JDK1.8新特性</li></ul></li><li>Java 集合<ul><li>引言</li><li>List</li><li>Set</li><li>Map</li></ul></li><li>Java 并发<ul><li>基础</li><li>ThreadLocal</li><li>Java内存模型</li><li>锁</li><li>并发工具类</li><li>线程池</li></ul></li><li>JVM<ul><li>引言</li><li>内存管理</li><li>JVM调优</li><li>虚拟机执行</li></ul></li></ul><p><strong>Spring</strong></p><ul><li>基础</li><li>IOC</li><li>AOP</li><li>事务</li><li>MVC</li><li>Spring Boot</li><li>Spring Cloud</li></ul><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p><strong>MySQL</strong></p><ul><li>基础</li><li>数据库架构</li><li>存储引擎</li><li>日志</li><li>SQL 优化</li><li>索引</li><li>锁</li><li>事务</li><li>高可用&#x2F;性能</li><li>运维</li></ul><p><strong>Redis</strong></p><ul><li>基础</li><li>持久化</li><li>高可用</li><li>缓存设计</li><li>Redis运维</li><li>Redis应用</li><li>底层结构</li><li>其他问题</li></ul><p><strong>RocketMQ&#x2F;Kafka</strong></p><ul><li>基础</li><li>进阶</li><li>原理</li></ul><p><strong>ES</strong></p><h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><p><strong>计算机网络</strong></p><ul><li>基础</li><li>网络综合</li><li>HTTP</li><li>TCP</li><li>UDP</li><li>IP</li><li>网络安全</li></ul><p><strong>操作系统</strong></p><ul><li>引论</li><li>操作系统结构</li><li>进程和线程</li><li>内存管理</li><li>文件</li><li>IO</li></ul><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><p>算法的话推荐大家最起码刷一下牛客网上的 <a href="https://www.nowcoder.com/ta/coding-interviews">《剑指offer》67题</a></p><p>答案的话大家可以在网上搜一下“牛客网《剑指Offer》66题题解”，我本人参考的leetcode上的《画解剑指 Offer》不过这个要开会员，大家可以根据自己的需求进行选择。</p><p>之后要是还有时间和精力的话推荐大家再刷一下 <a href="https://www.nowcoder.com/ta/job-code-high-rd">牛客霸题</a>，上面可以筛选企业和考察次数等</p><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>todo</p><h2 id="问答环节"><a href="#问答环节" class="headerlink" title="问答环节"></a>问答环节</h2><p>一面</p><ul><li>能给我简单介绍一下目前团队的主要业务吗？以及相应的人员情况？如果我后面有机会能加入进去大概会做哪个方向？</li><li>您认为在这里工作最大的挑战是什么？以及这个团队最吸引您的是什么？</li></ul><p>二面</p><ul><li>团队未来一段时间内的工作重心是什么？新人有机会接触到吗？</li><li>对于这个岗位您最看重应聘者什么核心能力？您认为这项工作最大的挑战是什么？如果有幸加入，我需要提前准备什么？</li></ul><p>三面</p><ul><li>您筛选人才一般最看重哪些能力？</li><li>您希望我最为一线员工在公司发挥出怎样的价值？</li><li>您对我个人提升上有哪些建议？</li></ul><p>hr面</p><ul><li>想了解下公司的员工培养机制是怎么样的？以及是否有导师之类的</li><li>公司薪资构成是怎么样的？</li><li>公司晋升的周期</li><li>试用期是多久？转正考核标准是什么？</li><li>团队的工作氛围和领导风格是怎么样的？</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文受众主要为，互联网技术研发人员。&lt;/p&gt;
&lt;p&gt;技术面试一般三面和HRBP面不太会卡人，主要都是停在了一面和二面上。我这次换工作前期主要是一面通过率比较低，后面主要是二面通过低。&lt;/p&gt;
&lt;p&gt;总结影响面试通过的几点因素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否真的招人（招几个</summary>
      
    
    
    
    <category term="面试晋升" scheme="https://blog.haxianhe.com/categories/%E9%9D%A2%E8%AF%95%E6%99%8B%E5%8D%87/"/>
    
    
    <category term="面试晋升" scheme="https://blog.haxianhe.com/tags/%E9%9D%A2%E8%AF%95%E6%99%8B%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>Java 核心技术 - 异常处理机制</title>
    <link href="https://blog.haxianhe.com/2023/04/04/cs-basic/cs-basic-language/cs-basic-language-java/Java%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>https://blog.haxianhe.com/2023/04/04/cs-basic/cs-basic-language/cs-basic-language-java/Java%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</id>
    <published>2023-04-04T05:00:00.000Z</published>
    <updated>2024-01-17T16:47:09.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、异常分类"><a href="#一、异常分类" class="headerlink" title="一、异常分类"></a>一、异常分类</h2><p>Java 异常可以分为三类：受检查异常（checked exception）、运行时异常（runtime exception）和错误（error）。 </p><p>受检查异常是在编译时就需要处理的异常，如果没有处理会导致编译错误。例如，IOException、ClassNotFoundException 等。</p><p>运行时异常是指不需要在编译时处理的异常，它们通常表示程序逻辑错误或输入错误。例如，NullPointerException、ArrayIndexOutOfBoundsException 等。</p><p>错误通常是指无法恢复的严重问题，例如 VirtualMachineError、OutOfMemoryError 等。与异常不同，程序无法通过捕获和处理错误来进行恢复。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20230404131723.png"></p><h2 id="二、异常具体场景"><a href="#二、异常具体场景" class="headerlink" title="二、异常具体场景"></a>二、异常具体场景</h2><h3 id="2-1-ClassNotFoundException"><a href="#2-1-ClassNotFoundException" class="headerlink" title="2.1.ClassNotFoundException"></a>2.1.ClassNotFoundException</h3><p>ClassNotFoundException一般在Java程序中出现，表示无法找到指定类。以下是一个ClassNotFoundException的例子： </p><p>假设我们在Java代码中使用了一个类库，但是这个类库没有被正确地添加到项目的类路径中，那么当我们在代码中引用这个类时，就会抛出ClassNotFoundException异常，因为编译器和JVM无法找到这个缺失的类。</p><p>例如，在以下代码中，我们尝试使用一个名为”com.example.MyClass”的类，但是这个类并没有被正确地添加到类路径中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行该代码时，将会抛出ClassNotFoundException异常，因为无法找到指定的MyClass类。</p><h3 id="2-2-NullPointerException"><a href="#2-2-NullPointerException" class="headerlink" title="2.2.NullPointerException"></a>2.2.NullPointerException</h3><p>NullPointerException 是 Java 编程语言中的一个异常类型，通常在使用 null 值的对象或调用 null 值的方法时抛出。以下是一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length(); <span class="comment">// 这里会抛出 NullPointerException 异常，因为 str 变量的值为 null。</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，变量 str 被赋值为 null，而在下一行代码中我们试图调用它的 length() 方法。由于 str 变量的值为 null，它不指向任何对象，所以在尝试访问它的属性或方法时会抛出 NullPointerException 异常。</p><h3 id="2-3-ArrayIndexOutOfBoundsException"><a href="#2-3-ArrayIndexOutOfBoundsException" class="headerlink" title="2.3.ArrayIndexOutOfBoundsException"></a>2.3.ArrayIndexOutOfBoundsException</h3><p>当我们尝试访问数组中不存在的索引位置时，就会抛出 ArrayIndexOutOfBoundsException 异常。 </p><p>例如，如果我们定义了一个长度为5的数组，并且尝试访问第6个元素，就会抛出此异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; System.out.println(array[<span class="number">5</span>]);  <span class="comment">// 抛出 ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure><h3 id="2-4-OutOfMemoryError"><a href="#2-4-OutOfMemoryError" class="headerlink" title="2.4.OutOfMemoryError"></a>2.4.OutOfMemoryError</h3><p>OutOfMemoryError一般在Java程序中出现，表示JVM中没有足够的内存来分配新的对象。以下是一个OutOfMemoryError的例子： </p><p>假设我们编写了一个Java应用程序，该程序需要处理大量的数据，并将这些数据存储在内存中。如果我们没有正确地管理内存，或者数据量过大，那么就可能会导致JVM耗尽内存并抛出OutOfMemoryError异常。</p><p>例如，以下代码试图创建一个非常大的整数数组，超过了JVM所能容纳的内存限制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.MAX_VALUE]; </span><br></pre></td></tr></table></figure><p>在运行该代码时，将会抛出OutOfMemoryError异常，因为JVM无法分配足够的内存以创建如此大的数组。</p><h3 id="2-5-VirtualMachineError"><a href="#2-5-VirtualMachineError" class="headerlink" title="2.5.VirtualMachineError"></a>2.5.VirtualMachineError</h3><p>VirtualMachineError是Java虚拟机（JVM）抛出的一种错误，表示JVM出现了内部错误。以下是一个可能导致VirtualMachineError的例子： </p><p>在运行时不断创建新线程并不停地加载类，这可能会导致JVM内存不足而抛出OutOfMemoryError或StackOverflowError，进而引发VirtualMachineError。</p><h2 id="三、异常捕获"><a href="#三、异常捕获" class="headerlink" title="三、异常捕获"></a>三、异常捕获</h2><p>在Java中，异常可以使用try-catch语句进行捕获和处理。try块包含可能会抛出异常的代码，如果发生异常，则在try块中立即跳转到相应的catch块进行处理。 以下是一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能会抛出异常的代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>; <span class="comment">// 这里会抛出ArithmeticException异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">    <span class="comment">// 异常处理代码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;发生了算术异常：&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，try块中的代码尝试将10除以0，这会导致ArithmeticException异常被抛出。该异常将由catch块捕获，然后打印一条错误消息。注意，catch块中的参数类型必须与try块中抛出的异常类型匹配。</p><p>除了try-catch语句之外，Java还提供了finally子句，它可以在try块执行结束后无论是否有异常都执行一些清理操作，例如关闭文件或释放资源。以下是一个带有finally子句的完整示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能会抛出异常的代码</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 处理文件...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    <span class="comment">// 文件未找到异常处理代码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;文件未找到：&quot;</span> + e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 清理代码</span></span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line">        file.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，try块中打开了一个文件输入流，并进行处理。如果发生FileNotFoundException异常，则由catch块捕获并打印错误消息。无论是否有异常，finally子句都会尝试关闭文件输入流，以确保资源得到释放。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、异常分类&quot;&gt;&lt;a href=&quot;#一、异常分类&quot; class=&quot;headerlink&quot; title=&quot;一、异常分类&quot;&gt;&lt;/a&gt;一、异常分类&lt;/h2&gt;&lt;p&gt;Java 异常可以分为三类：受检查异常（checked exception）、运行时异常（runtime e</summary>
      
    
    
    
    <category term="专业知识" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="java" scheme="https://blog.haxianhe.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2022 年终总结</title>
    <link href="https://blog.haxianhe.com/2023/01/05/summary/2022%20%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.haxianhe.com/2023/01/05/summary/2022%20%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-05T00:00:00.000Z</published>
    <updated>2024-01-17T18:01:22.182Z</updated>
    
    <content type="html"><![CDATA[<p>时间过的真快，一晃一年又过去了，2022年发生了太多太多值得铭记的事，比如今年成功晋升了，比如今年失恋了而且很狼狈，比如防控了三年的疫情突然放开了，比如一个人来到厦门来了场潇潇洒洒的旅行。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>今年工作总的来说是“稳中有进”：</p><ul><li>年初晋升成功。</li><li>年中接手了权益、账单系统。</li></ul><p>目前工作上的瓶颈在于技术不够扎实，这是硬伤，也是明年的主攻点。</p><h3 id="晋升"><a href="#晋升" class="headerlink" title="晋升"></a>晋升</h3><p>晋升和面试有很多想通之处，比如都有迹可循，需要提前认真准备材料，反复练习等等。一句话总结就是：“唯用心尔”。</p><p>但是两者也有一定的区别。</p><p>晋升因为评审的都是团队内部的，或者公司内部的，多多少少对你做的业务有一定的了解，相对来说问的问题会更偏业务，以业务为主，以技术为辅。</p><p>而面试，因为面试官对你并不了解，提问的问题也主要围绕着你的简历来的，相对来说更好引导，问的问题更多的是以业务为引，以技术为主。</p><h3 id="权益、账单系统"><a href="#权益、账单系统" class="headerlink" title="权益、账单系统"></a>权益、账单系统</h3><p>之前一直懵懵懂懂的，最近开始把自己来了这边的团队之后做的事情梳理了一下，也逐渐抓住了一些重点。</p><p>总结了一下目前主R的业务：</p><ul><li>流水统计、充值、权益</li><li>我的钱包</li><li>账单系统</li></ul><p>梳理完会更有工作重心，有“负责”的感觉，也有助于在自己负责的业务上做深耕细作，做更多的建设性工作。</p><h2 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h2><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>今年读了9本书：</p><ul><li>《潜规则》</li><li>《血酬定律》</li><li>《支付平台架构》</li><li><a href="https://blog.haxianhe.com/2022/08/10/book-notes-psycholog/%E7%9B%94%E7%94%B2%E9%AA%91%E5%A3%AB/">《为自己出征·盔甲骑士》</a></li><li><a href="https://blog.haxianhe.com/2022/08/21/book-notes-psycholog/%E5%BD%93%E4%B8%8B%E7%9A%84%E5%8A%9B%E9%87%8F/">《当下的力量》</a></li><li>《毛泽东选集（卷一）》</li><li><a href="https://blog.haxianhe.com/2022/10/15/book-notes-economic/%E5%85%B7%E4%BD%93%E6%83%85%E5%86%B5%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90-%E8%AF%BB%E3%80%8A%E5%A4%A7%E8%B4%A5%E5%B1%80%E3%80%8B/">《大败局 I》</a></li><li>《洞穴奇案》</li><li>《阅读的方法》</li></ul><p>最喜欢的书是《为自己出征》和《毛泽东选集》，前者让我能更好的去调整自己心里的状态，去直面自己的内心，试着去了解自己、去爱自己。后者开阔了我的视野，打开了我的格局，受限于眼界实在不知道该怎么写这本书的读书笔记，等后面N刷的时候、真的读懂了再写吧，要不是对这本书的一种亵渎。</p><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><p>健身总的来说不达标：</p><ul><li>有记录的健身次数有12次（开始用训记以后）</li><li>找教练带着练了两次</li></ul><p>不过做的好的是在入冬之前很长一段时间每天早上都坚持晨跑，后面年后天气回到零上以后还会继续坚持。</p><h3 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h3><p>今年进行了三次旅行：</p><ul><li><a href="https://blog.haxianhe.com/2022/07/23/travel-notes/%E5%9C%86%E6%A2%A6%E8%8D%89%E5%8E%9F/">《内蒙古》</a></li><li><a href="https://blog.haxianhe.com/2022/08/05/travel-notes/%E7%9C%BA%E6%9C%9B%E5%A4%A7%E6%B5%B7/">《大连》</a></li><li>《厦门跨年》</li></ul><p>这三次旅行都超级超级开心！其中内蒙古和厦门我都是第一次去，内蒙古是同事自驾，一路超开心。厦门是一个人来跨年的，也超级潇洒。</p><h2 id="22-年目标回顾"><a href="#22-年目标回顾" class="headerlink" title="22 年目标回顾"></a>22 年目标回顾</h2><ul><li>读书24本<ul><li>这个没完成，读书习惯还有待加强，23年重点去做，目标值适当调低。</li></ul></li><li>健身96次<ul><li>统计数据不完全，大概率没完成，23年把目标调低。</li></ul></li><li>旅行去2个没去过的省份<ul><li>目标达成。目标值订的适中。</li></ul></li><li>考研<ul><li>没完成，彻底放弃考研的想法了。</li></ul></li><li>写作24篇<ul><li>没完成，只写了9篇，23年不再单独计划。</li></ul></li></ul><h2 id="23-年目标"><a href="#23-年目标" class="headerlink" title="23 年目标"></a>23 年目标</h2><ul><li>工作<ul><li>晋升成功</li><li>程序员练级攻略</li><li>leetcode</li></ul></li><li>爱好<ul><li>读书（写作）12本</li><li>健身（美食）52次</li><li>旅行（摄影）2个没去过的地方</li></ul></li></ul><h2 id="个人Milestone"><a href="#个人Milestone" class="headerlink" title="个人Milestone"></a>个人Milestone</h2><ul><li>恢复单身，重新去学习爱自己</li><li>放弃幻想，专注技术</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时间过的真快，一晃一年又过去了，2022年发生了太多太多值得铭记的事，比如今年成功晋升了，比如今年失恋了而且很狼狈，比如防控了三年的疫情突然放开了，比如一个人来到厦门来了场潇潇洒洒的旅行。&lt;/p&gt;
&lt;h2 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>具体情况具体分析-读《大败局 I》</title>
    <link href="https://blog.haxianhe.com/2022/10/15/book-notes/book-notes-economic/%E5%85%B7%E4%BD%93%E6%83%85%E5%86%B5%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90-%E8%AF%BB%E3%80%8A%E5%A4%A7%E8%B4%A5%E5%B1%80%E3%80%8B/"/>
    <id>https://blog.haxianhe.com/2022/10/15/book-notes/book-notes-economic/%E5%85%B7%E4%BD%93%E6%83%85%E5%86%B5%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90-%E8%AF%BB%E3%80%8A%E5%A4%A7%E8%B4%A5%E5%B1%80%E3%80%8B/</id>
    <published>2022-10-15T04:00:00.000Z</published>
    <updated>2024-01-06T06:06:54.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、作者"><a href="#一、作者" class="headerlink" title="一、作者"></a>一、作者</h2><p>吴晓波，<a href="https://baike.baidu.com/item/%E8%B4%A2%E7%BB%8F%E4%BD%9C%E5%AE%B6/59988690?fromModule=lemma_inlink">财经作家</a>，广东<a href="https://baike.baidu.com/item/%E6%A2%85%E5%8E%BF/3188901?fromModule=lemma_inlink">梅县</a>人，1968年9月9日出生于浙江<a href="https://baike.baidu.com/item/%E5%AE%81%E6%B3%A2/209476?fromModule=lemma_inlink">宁波</a>，<a href="https://baike.baidu.com/item/%E5%93%88%E4%BD%9B%E5%A4%A7%E5%AD%A6/261536?fromModule=lemma_inlink">哈佛大学</a>访问学者，“蓝狮子”财经图书出版人。曾任<a href="https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6/131671?fromModule=lemma_inlink">上海交通大学</a>、<a href="https://baike.baidu.com/item/%E6%9A%A8%E5%8D%97%E5%A4%A7%E5%AD%A6/154250?fromModule=lemma_inlink">暨南大学</a>EMBA课程<a href="https://baike.baidu.com/item/%E6%95%99%E6%8E%88/18291?fromModule=lemma_inlink">教授</a>，常年从事公司研究。</p><p>毕业于<a href="https://baike.baidu.com/item/%E5%A4%8D%E6%97%A6%E5%A4%A7%E5%AD%A6/111790?fromModule=lemma_inlink">复旦大学</a>新闻系，毕业后开始了他长达13年的商业记者生涯。2001年吴晓波出版的《<a href="https://baike.baidu.com/item/%E5%A4%A7%E8%B4%A5%E5%B1%80/1720289?fromModule=lemma_inlink">大败局</a>》证明了严肃的商业写作也能够跻身畅销书行列。而他辛苦经营两年的蓝狮子财经丛书则成为中国本土财经书籍出版的最著名的品牌之一。他的时间被划分为几块，主要的精力用在<a href="https://baike.baidu.com/item/%E5%87%BA%E7%89%88/285005?fromModule=lemma_inlink">出版</a>事业上，同时还坚持以每年写作一本书的速度向外界传达自己的观念。</p><p>2009年被《<a href="https://baike.baidu.com/item/%E5%8D%97%E6%96%B9%E4%BA%BA%E7%89%A9%E5%91%A8%E5%88%8A/6810693?fromModule=lemma_inlink">南方人物周刊</a>》评为年度“中国青年领袖”，2014<a href="https://baike.baidu.com/item/%E7%99%BE%E5%BA%A6moments%E8%90%A5%E9%94%80%E7%9B%9B%E5%85%B8/16040542?fromModule=lemma_inlink">百度moments营销盛典</a>最具品牌价值<a href="https://baike.baidu.com/item/%E8%B4%A2%E7%BB%8F%E4%BD%9C%E5%AE%B6/59988690?fromModule=lemma_inlink">财经作家</a>榜首。</p><p>2015年7月27日，成为<a href="https://baike.baidu.com/item/%E7%BB%BF%E5%9C%B0%E6%8E%A7%E8%82%A1%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/18482979?fromModule=lemma_inlink">绿地控股股份有限公司</a>独董候选人。 [2]  2021年10月，首档社交分享综艺，《<a href="https://baike.baidu.com/item/%E5%9B%BD%E8%B4%A7%E6%BD%AE%E8%B5%B7%E6%9D%A5/58975315?fromModule=lemma_inlink">国货潮起来</a>》诚意搭建了一个社交平台——国潮快闪店，邀请吴晓波担任店长。 [7] </p><p>著有多本具有影响力的图书：</p><ul><li>《大败局 I》《大败局 II》</li><li>《激荡三十年》（上）（下）</li><li>《腾讯传》</li><li>《历代经济变革得失》</li></ul><h2 id="二、共同的失败基因"><a href="#二、共同的失败基因" class="headerlink" title="二、共同的失败基因"></a>二、共同的失败基因</h2><ol><li>普遍缺乏道德感和人文关怀意识</li><li>普遍缺乏对规律和秩序的尊重</li><li>普遍缺乏系统的职业精神</li></ol><h2 id="三、具体情况具体分析"><a href="#三、具体情况具体分析" class="headerlink" title="三、具体情况具体分析"></a>三、具体情况具体分析</h2><p>书中总结了这些企业共同的失败原因，但是成也萧何，败也萧何，这些企业本就是靠着这些失败原因发展起来的，又怎么能简单的说是因为这些原因失败的呢？</p><p>引用人民日报的一句话：</p><blockquote><p>“没有所谓的马云的时代，只有时代中的马云。”</p></blockquote><p>就连我党在不同的历史阶段也会重新审视我国社会的当时的主要矛盾。那么一个企业就更应该在不同的发展阶段去重新审视大环境是否变化，企业经营策略是否需要调整等。</p><p>这本书通篇读下来，最大的一个感触就是这些失败的案例最典型的一个特征就是成功之后没有及时跟进调整自己企业的经营策略，过分依赖早先经营成功的秘籍，十分可惜。</p><p>马克·吐温（查理·芒格）说：”<strong>手里拿着锤子，看什么都像钉子</strong>。”</p><p>当我们大脑里面只有一种思维或者工具或者方法时，我们做任何事都会用这种思维或者工具或者方法来解决和分析。其实就是一种固化单一的思维方式。</p><p>用矛盾论的话来说就是：“在事物发展的不同阶段，有着不同的矛盾，这些矛盾，不但各各有其特殊性，不能一律看待，而且每一矛盾的两方面，又各各有其特点，也是不能一律看待的。”</p><p>列宁说：马克思主义的最本质的东西，马克思主义的活的灵魂，就在于具体地分析具体的情况。</p><h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><ul><li><a href="https://baike.baidu.com/item/%E5%90%B4%E6%99%93%E6%B3%A2/29563">吴晓波-百度百科</a></li><li><a href="https://www.marxists.org/chinese/maozedong/marxist.org-chinese-mao-193708.htm">《矛盾论》</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、作者&quot;&gt;&lt;a href=&quot;#一、作者&quot; class=&quot;headerlink&quot; title=&quot;一、作者&quot;&gt;&lt;/a&gt;一、作者&lt;/h2&gt;&lt;p&gt;吴晓波，&lt;a href=&quot;https://baike.baidu.com/item/%E8%B4%A2%E7%BB%8F%E</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://blog.haxianhe.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="经济学" scheme="https://blog.haxianhe.com/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>后端分页设计方案</title>
    <link href="https://blog.haxianhe.com/2022/10/01/cs-skill/cs-skill-system/%E5%90%8E%E7%AB%AF%E5%88%86%E9%A1%B5%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.haxianhe.com/2022/10/01/cs-skill/cs-skill-system/%E5%90%8E%E7%AB%AF%E5%88%86%E9%A1%B5%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</id>
    <published>2022-10-01T15:00:00.000Z</published>
    <updated>2024-01-17T18:04:02.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近要对帐单历史数据清洗，发现清洗后的数据存在乱序问题。简单来说就是补10月份补1条1月份的账单，页面展示的时候这条账单会出现9月份数据之前。</p><p>原因是因为这里用的是游标分页，而分页的字段是id（严格自增），所以10月份补的账单id会比9月份的账单id大，展示的时候也就会展示在前面。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>移动端按照时间序展示账单。</p><h2 id="常规方案"><a href="#常规方案" class="headerlink" title="常规方案"></a>常规方案</h2><p>在设计具体方案之前对后端实现分页的方法做了一下简单梳理。</p><p>目前后端分页设计一般分为两种类型：传统网站比较常见的电梯式分页布局及移动端比较常见的流式分页布局。</p><h3 id="传统网站电梯式分页布局"><a href="#传统网站电梯式分页布局" class="headerlink" title="传统网站电梯式分页布局"></a>传统网站电梯式分页布局</h3><p>电梯式分页布局在传统网站中非常常见，比如百度、淘宝：<br><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20221001221839.png"><br><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20221001221855.png"></p><p>它的特点是在网站的底部有分页栏，用户不仅可以点击上一页、下一页浏览数据，还可以直接点击页码跳转到特定页，所以电梯式分页的的 SQL 查询（以下称为传统分页）也比较统一，基本上为前端提供页数及每页的数量，后端套用下面的 SQL 查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#currentPage 为当前页数（以 <span class="number">1</span> 开始），pagingSize 为每页的数据量</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ... <span class="keyword">where</span> ... <span class="keyword">order</span> <span class="keyword">by</span> ... limit (currentPage<span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> pagingSize, pagingSize;</span><br></pre></td></tr></table></figure><h3 id="流式分页布局"><a href="#流式分页布局" class="headerlink" title="流式分页布局"></a>流式分页布局</h3><p>流式分页布局在移动端比较流行，因为移动端的屏幕尺寸普遍较小，会导致分页栏不容易点击。并且移动端拥有良好的滑动体验，向上滑动加载更多，向下滑动刷新的操作方式更加便利。</p><p>流式分页布局在后端的处理上，有两种实现方案，一种是直接将传统分页逻辑套用到移动端流式分页上，另一种是游标分页。</p><h4 id="直接将传统分页套用到移动端流式分页上"><a href="#直接将传统分页套用到移动端流式分页上" class="headerlink" title="直接将传统分页套用到移动端流式分页上"></a>直接将传统分页套用到移动端流式分页上</h4><p>直接将传统分页套用到移动端流式分页上的主要问题如下：</p><p><strong>数据重复</strong></p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20221001222845.png"></p><p><strong>数据缺失</strong></p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20221001222936.png"></p><p><strong>效率低</strong></p><p>使用 limit 在数据量小的时候并不会有效率问题，但是当数据偏移量很大时性能会开始急剧下降。</p><h4 id="游标分页"><a href="#游标分页" class="headerlink" title="游标分页"></a>游标分页</h4><p>游标分页则不需要提供当前页码，而是提供当前页的起始位置（也称为游标）用于定位，游标分页的 SQL 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">cursor</span> 为上一页最后一条新闻的 create_date（如果是第一页则为当前时间），pagingSize 为每页的数据量</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news_ <span class="keyword">where</span> create_date <span class="operator">&gt;</span> $<span class="keyword">cursor</span> <span class="keyword">order</span> <span class="keyword">by</span> create_date <span class="keyword">desc</span> limit $pagingSize</span><br></pre></td></tr></table></figure><p>传统分页的偏移量是固定的，所以会因为数据的新增或减少导致接下来加载数据重复或丢失。而游标分页则不会出现这种情况，因为当数据发生新增和减少时，游标的位置也会相对变化。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>经过分析发现，目前的游标分页方案还是要采用的，现在的问题是游标字段id不能代表实际在页面上要展示的顺序。</p><p><strong>方案一：</strong>换一个游标字段，将id换成create_time。存在问题，当create_time相同时，非第一页数据会丢掉。</p><p><strong>方案二：</strong>在方案一的基础上只要能保证同一时间只有1条记录就没问题了，比如根据时间生成id，时间大的id也大。</p><p><strong>方案三：</strong>我这里遇到的问题不太好通过根据时间生成id来解决（id生成不在我这边），所以增加一个冗余字段，通过将账单实际生成时间和id拼接来达到先生成的账单一定先展示，同一时间生成的账单按照id大小顺序展示的目的。</p><p>这里只能采用方案三来解决这个问题，mysql索引长度限制为131个字节，经过计算13位的时间戳+18位的id完全够用。</p><p>问题一：未来时间戳长度会不会增加？<br>经过计算200年内不会增长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(9999999999999-1664635278000)/(365*24*60*60*1000) = 264.31(年)</span><br></pre></td></tr></table></figure><p>问题二：id会不会增长？<br>之前为了保证id的严格自增，id的生成采用的是 snowflake 算法生成的，所以不会增长</p><p>生成冗余字段规则如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort_id = (create_time * 1000000000000000000) + id;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>分页方案主要分传统PC电梯分页和移动端流式分页</li><li>用传统电梯分页方案实现流式分页主要的问题有数据重复、数据丢失、数据量大时性能低。</li><li>流式分页主要通过游标分页方案来实现</li><li>当出现因为洗数据导致分页乱序问题时，最直接的方案时将游标字段改为一个和数据生成时间相关的字段。</li><li>如果数据量比较大数据统一时间可能存在多条记录要么想办法保证相同时间内只能有一条记录，要么增加一个冗余字段将生成时间和id冗余到一起。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近要对帐单历史数据清洗，发现清洗后的数据存在乱序问题。简单来说就是补10月份补1条1月份的账单，页面展示的时候这条账单会出现9月份数据之前</summary>
      
    
    
    
    <category term="专业技能" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E6%8A%80%E8%83%BD/"/>
    
    <category term="系统设计" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E6%8A%80%E8%83%BD/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="系统设计" scheme="https://blog.haxianhe.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>永恒的当下 - 读《当下的力量》</title>
    <link href="https://blog.haxianhe.com/2022/08/21/book-notes/book-notes-psycholog/%E5%BD%93%E4%B8%8B%E7%9A%84%E5%8A%9B%E9%87%8F/"/>
    <id>https://blog.haxianhe.com/2022/08/21/book-notes/book-notes-psycholog/%E5%BD%93%E4%B8%8B%E7%9A%84%E5%8A%9B%E9%87%8F/</id>
    <published>2022-08-21T09:30:00.000Z</published>
    <updated>2024-01-06T06:06:54.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>最近在一次和蛋蛋的沟通中，我表达了自己各种顾虑之后，蛋蛋给我推荐了这本书，并表示自己曾反复阅读过多次。</p><blockquote><p>没有任何事情可以发生在过去，所有的事情都发生在当下。</p><p>也没有任何事情会发生在未来，所有的事情都只发生在当下。</p><p>过去发生的事情是一个记忆的痕迹，它储存在大脑中，是过去的当下。当你记起过去发生的事情时，你就重新激活了那个记忆——而你是在当下做这件事情的。未来是一个幻象的当下，是思维对未来的投射。当未来来临时，它是以当下的方式到来。当你思考未来时，你也是在当下做这件事情。很明显，过去和未来本身没有现实性。就像月亮本身不会发光一样，它只能反射太阳光，所以过去和未来仅是永恒的当下的光线、力量和现实性的反映。过去和未来的现实性都是从当下借过来的。</p></blockquote><p>读完发现这本书确实是我的良药，过去我确实深陷于过去和未来之中，被思维所奴役。</p><h2 id="被思维所奴役"><a href="#被思维所奴役" class="headerlink" title="被思维所奴役"></a>被思维所奴役</h2><blockquote><p>“是认同于你的思维，它使人们进行强迫性的思考。不能停止思考是一个可怕的烦恼，由于几乎每一个人都遭受着此种痛苦，而我们又无法意识到这一点，所以这就成了一件很正常的事情。这种不停的思维活动使你无法达到内心的宁静状态。同时，它创造了一个虚假的自我，不断投射出恐惧和苦难的阴影。”</p></blockquote><p>思维本身是一个帮助我们更好的去采取行动的工具，起主导作用的本应该是行动本身，但是现在由于大量且过度的思考，使我们被思维所绑架，被迫卷入思维的长河之中，遨游于“过去”和“未来”，深陷于痛苦之中。</p><p>那么我们是如何一步步走到被思维所奴役的地步的呢？</p><p>首先，大脑本身是一个十分好用的工具，但是在你个人城中过程中，在你个人和文化环境的影响下，你养成了从思维活动中获取自己存在感的习惯，随着这种习惯的不断加强，最终形成了一种强迫性思维的上瘾症。</p><p>对于这种从思维中获取自我存在感的感觉来说，当下时刻几乎不存在，只有过去和未来才是最重要的。</p><p>“当下时刻就是解脱的关键。但是，只要你认同你的思维，你就难以找到当下。”</p><p>所以拜托被思维所奴役的第一步就是观察它。这是一种自我存在的感觉，而不是思维，它超越了思维。</p><h2 id="情绪，身体对思维的反应"><a href="#情绪，身体对思维的反应" class="headerlink" title="情绪，身体对思维的反应"></a>情绪，身体对思维的反应</h2><p>思维-&gt;情绪-&gt;生理</p><p>你的思维活动会影响到你的情绪，你的情绪积累到一定程度会进而使你产生生理变化。</p><p>如果你被思维所奴役，在思维过程中多是无意识状态，那么你也同样会丧失对情绪状态的控制。原因很简单，因为你的思维过程是无意识的，那么在这些无意识思维所产生的情绪中也缺少了你意识的成分，当这些无意识情绪爆发的时候，你也就丧失了自我的掌控，被无意识情绪所控制，这也是为什么有些人情绪不稳定的原因所在。</p><p>解决方法和解决不被思维所奴役的方法是一样的：观察它，观察思维活动产生情绪的过程。</p><h2 id="意识，摆脱痛苦的途径"><a href="#意识，摆脱痛苦的途径" class="headerlink" title="意识，摆脱痛苦的途径"></a>意识，摆脱痛苦的途径</h2><p>我们痛苦的根源是被思维所奴役、被情绪所控制，是陷入了一种无意识状态。</p><p>解决办法就是想办法让意识重新降临。</p><p>无论是思维还是情绪，观察的过程本身就是将意识降临本体的过程。而当意识完完全全降临了之后，也就不存在被思维所奴役和被情绪控制了的情况，我们也就摆脱了痛苦。</p><h2 id="当下是你所拥有的一切"><a href="#当下是你所拥有的一切" class="headerlink" title="当下是你所拥有的一切"></a>当下是你所拥有的一切</h2><blockquote><p>“请你务必认识到，当下时刻是你所拥有的一切，把你的生活重心完全放到当下这一刻，把你先前在时间内流连并短暂地访问当下时刻的做法改为关注当下时刻，只在必要时简单地回顾过去和展望未来。永远对当下说“是”。有什么比对已然存在的东西进行内在的抗拒更徒劳、更疯狂的吗？有什么比反对生命本身，也就是当下，而且永远是当下，更疯狂的吗？向“是”臣服，对生活说“是的”，看看生活是如何为你服务而不是与你为敌的。”</p><p>“接纳，然后采取行动。不管当下时刻的情况怎样，心甘情愿地接受它，就像它是你选择的一样。总是与它共事，而不是抗拒它，使它成为你的朋友和盟友而不是敌人。这将会不可思议地改变你的整个生活。”</p><p>没有任何事情可以发生在过去，所有的事情都发生在当下。</p><p>也没有任何事情会发生在未来，所有的事情都只发生在当下。</p><p>过去发生的事情是一个记忆的痕迹，它储存在大脑中，是过去的当下。当你记起过去发生的事情时，你就重新激活了那个记忆——而你是在当下做这件事情的。未来是一个幻象的当下，是思维对未来的投射。当未来来临时，它是以当下的方式到来。当你思考未来时，你也是在当下做这件事情。很明显，过去和未来本身没有现实性。就像月亮本身不会发光一样，它只能反射太阳光，所以过去和未来仅是永恒的当下的光线、力量和现实性的反映。过去和未来的现实性都是从当下借过来的。</p></blockquote><p>过去和未来都是虚假的谎言，只有当下才是你所拥有的一切。</p><p>我们的人生要靠当下去改变，我们梦想要靠当下去实现。</p><p>尊重每一件事情，却又不在乎这一切。在有形的世界，去追寻无形的自由 —— 不以物喜，不以己悲。</p><h2 id="思维逃避当下的策略"><a href="#思维逃避当下的策略" class="headerlink" title="思维逃避当下的策略"></a>思维逃避当下的策略</h2><p>一些典型的无意识的例子：</p><blockquote><ol><li>你是否有应该做但现在又没有做的事情呢？如果有，请现在就开始做吧。或者，你就完全接受你此刻的消极、懒惰或被动，如果这是你的选择的话。请充分地享受它，请尽可能地懒惰吧。</li><li><strong>你的压力很大吗？你是否太忙于进入未来，而把当下变成你达到未来目标的手段？压力的产生是由于你在“这里”却想到“那里”去，或你在当下却想去未来。</strong><br>3.过去是否占据了你大部分的注意力？你是否经常正面地或负面地谈论或思考着过去呢？这些过去是你曾经取得的伟大成就、你的冒险经历、你的受害经历，还是别人对你做的可怕的事情或你对别人做的可怕的事情？你的思维过程创造了愧疚、骄傲、怨恨、愤怒、遗憾还是自怜呢？</li><li>你感到忧虑吗？你是否经常想到“万一”？如果是的话，你就是在认同你的思维，思维把自己投射到未来的情境中，并创造了恐惧。你是无法应对这个未来的情境的，因为它压根儿就不存在。这是一种精神上的幻觉。仅仅通过承认当下时刻的存在，你就可以停止这种有害健康和生活的疯狂行为。</li><li>某天，我会成功的。”你的目标是否占据了你大部分的注意力而让你把当下当成达到未来目的的一种手段？它是否夺走了你所做的事情本应带给你的欢乐？你是否在等待开始新的生活？如果你有这种思维模式，不管你取得了什么成就，你的当下时刻永远不够好，你的未来似乎永远会更好。这样就会让你永远得不到满足，你同意吗？</li><li>你的目标是否占据了你大部分的注意力而让你把当下当成达到未来目的的一种手段？它是否夺走了你所做的事情本应带给你的欢乐？</li><li>你是一个习惯等待的人吗？在你的生活当中，你花了多少时间在等待呢？我所说的小规模的等待指的是在邮局里排队、遇到交通堵塞、在机场里候机，或等待某人的到来或完成工作等。更大规模的等待指的是等待下一个假期、下一个更好的工作，等待孩子长大，等待一份好姻缘，等待成功，等待挣钱，等待成为重要的人物，等待开悟。人们总是用一生来等待开始新的生活，这是很常见的现象。<br>等待是一种思维状态，意味着你需要未来，而不要现在；你不要你所拥有的，而要你所没有的。任何一种形式的等待，都让你无意识地在你的此时此刻创造了一种内心的冲突：你不要此时此刻，你把希望寄托于未来。丧失对当下时刻的意识，会大大降低你的生命质量。</li></ol></blockquote><p>过去的就让它过去吧，未来的就留给未来吧，我们拥有的是现在。</p><p>设定目标并努力去实现目标本身并没有错，错误的是你将它看成是你对生命和对本体的感受的替代品。</p><h2 id="生命旅程的内在目的"><a href="#生命旅程的内在目的" class="headerlink" title="生命旅程的内在目的"></a>生命旅程的内在目的</h2><p>生命旅程的内在目的：达到临在状态，不以物喜，不以己悲。</p><blockquote><p>“你的生命旅程有一个外在目的和一个内在目的。外在目的是达到你的目标，完成这个或成就那个，这当然和未来有关。但是如果你的目标和你在未来将采取的行动占据了你太多的注意力，并且对你来说，它们比你现在所采取的步骤更为重要时，那你就失去了你旅程的内在目的。内在目的与你去的地方或你正在做的事没有任何关系，但是它与你如何做事有着密切的关系。它与你的未来没有关系，但是与你此刻意识的质量有密切的关系。外在目的属于时间和空间的水平维度；内在目的则关乎无时间的当下时刻的垂直维度。你外在的旅程可能包含着上百万个步伐；你内在的旅程却只有一步——你现在正在行动的那一步。随着你更多地意识到这一步，你会认识到它已经包含了其他所有的步骤以及你的目标，然后这一步就转变成一个完美的表述，一个绝美和有极佳质量的行动。它将会带着你进入本体，本体之光将会穿越它。这就是你内在旅程的目标和成就，一个驶向你自己的旅程。”</p><p>“我们达到外在目的很重要吗？世俗的成功或失败重要吗？</p><p>它的重要性在于你能不能了解自己的内在目的。外在目的就像一个游戏，你可能会不断地去玩，因为你喜欢它。但在你外在目的完全失败的同时，你的内在目的有可能取得成功。反之，更常见的是外在很富裕，内心“却很贫乏。或者如耶稣所说：“<strong>赢了全世界，却丢了灵魂</strong>。”</p></blockquote><p>人生本来就是一场修行，我们透过完成一个又一个人生目标来让自己悟得人生的内在意义 —— 即永恒的当下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>空间和时间都有其对应物，揭露它们自己的和你的真正本质。空间的内在对应是寂静，无限深入无念的领域。时间的内在对应物是临在，永恒的当下的意识。世界的最终目的不在于世界中，而是在于超越世界。</li><li>在死亡之前死亡，然后深深的走近它。你会发现有一种东西是超越生与死的，那就是<strong>永恒的当下</strong>。</li></ul><br><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;最近在一次和蛋蛋的沟通中，我表达了自己各种顾虑之后，蛋蛋给我推荐了这本书，并表示自己曾反复阅读过多次。&lt;/p&gt;
&lt;blockquote&gt;
&lt;</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://blog.haxianhe.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="心理学" scheme="https://blog.haxianhe.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>学会爱自己 - 读《盔甲骑士》</title>
    <link href="https://blog.haxianhe.com/2022/08/10/book-notes/book-notes-psycholog/%E7%9B%94%E7%94%B2%E9%AA%91%E5%A3%AB/"/>
    <id>https://blog.haxianhe.com/2022/08/10/book-notes/book-notes-psycholog/%E7%9B%94%E7%94%B2%E9%AA%91%E5%A3%AB/</id>
    <published>2022-08-10T01:08:00.000Z</published>
    <updated>2024-01-06T06:06:54.286Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220810083329.png"></p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>最近刚失恋，分手的过程很不对劲。而这已经是第二次出现类似的场景了，所以为什么？？</p><p>带着这样的疑惑，我咨询了几位心里老师，也得到了一些答案，这里不在多表。</p><p>这本书就是在这样大的背景下去读的，书很薄，全篇采用一种寓言的手法，通过描述一位骑士在梅林法师和小松鼠、鸽子的帮助下重新找回自我，脱下盔甲的故事。</p><p>文中首先交代了骑士把自己困在了盔甲里，自己的妻子儿子要离自己而去，然后骑士就此踏上了脱盔甲的真理之路。</p><h2 id="寂静之堡"><a href="#寂静之堡" class="headerlink" title="寂静之堡"></a>寂静之堡</h2><p>想要脱下自己身上盔甲的第一步是要勇敢的一个人面对自己内心，千万不要因为害怕面对自己，害怕孤独而选择与他人结伴，因为在外人面前，你永远会装作最好的样子。</p><p>还要知道一个道理，就是不要把生命都浪费在回顾过去和畅谈未来之中，而是应该抓住现在，快乐的活在当下。</p><h2 id="知识之堡"><a href="#知识之堡" class="headerlink" title="知识之堡"></a>知识之堡</h2><p>在可以做到不惧怕孤独，可以一个人面对自己的内心之后，还要知道一些关于打破枷锁的知识：</p><ol><li>爱不是需要</li><li>需要别人，对别人索取爱，是因为不爱自己</li><li>只能先爱自己，才能爱别人，不爱自己，也无法爱别人</li><li>学会为自己而活，做自己内心深处真正想做的事</li><li>从思想来产生的雄心壮志能够带来舒适的城堡和骏马良驹，而从内心产生的雄心壮志能够带来幸福和快乐</li><li>做自己发自内心想做的事，</li></ol><p>这里的第5点和我在《当下的力量》这本书看到的观点有异曲同工之妙，我们的思维（大脑）只是我们自我（意识）的一个工具，我们不能被思维所绑架，而是要根据需要去使用它。</p><h2 id="志勇之堡"><a href="#志勇之堡" class="headerlink" title="志勇之堡"></a>志勇之堡</h2><p>这里主要是想告诉我们，在打破枷锁的过程中不可避免会出现疑惑、恐惧甚至是反复，但是无论如何我们都要坚定上面我们在寂静之堡和知识之堡学到的知识，每次恐惧和疑惑之时可以提醒自己“恐惧和疑惑都是幻觉”。</p><h2 id="真理之巅"><a href="#真理之巅" class="headerlink" title="真理之巅"></a>真理之巅</h2><p>最后的最后，要想真正的打破枷锁，需要我们放下执着，交出信任，这里信任可以理解为任何一种力量，比如一种人体周围的能量场？比如人体的潜意识？？要相信只要做过的事情，冥冥之中自有记载，也一定会有相应的反作用力作用在相应的人身上（因果？？）。</p><p>这里我第一次用相对科学一点的角度理解了“举头三尺有神明”这句话。</p><p>一个人做一件事，哪怕没有人看见、知道，但是他自己是知道的，他自己的潜意识是知道的，无形之中就会影响到他的心态、行为举止，进而就会影响到他的生活，这不就是因果吗。</p><p>但行好事，莫问前程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>世间之事，本来本来很简单，使其变复杂的是我们自己，放下对过去的回忆和对未来的想象，把握住当下，开心、快乐、幸福的去做自己发自内心想做的事，每天如此，一生亦如此。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/haxianhe/pic/master/image/20220810083329.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://blog.haxianhe.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="心理学" scheme="https://blog.haxianhe.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java 核心技术 - JVM</title>
    <link href="https://blog.haxianhe.com/2022/06/26/cs-basic/cs-basic-language/cs-basic-language-java/Java%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20JVM/"/>
    <id>https://blog.haxianhe.com/2022/06/26/cs-basic/cs-basic-language/cs-basic-language-java/Java%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20JVM/</id>
    <published>2022-06-26T14:28:00.000Z</published>
    <updated>2024-01-17T16:46:10.576Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626223006.png"></p><h2 id="JVM-体系结构"><a href="#JVM-体系结构" class="headerlink" title="JVM 体系结构"></a>JVM 体系结构</h2><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626095252.png"></p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626100749.png"></p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626111850.png"></p><p>堆内存模型</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626163802.png"></p><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626110129.png"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。</p><h3 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h3><p>每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626110536.png"></p><p>该区域可能抛出以下异常：</p><ul><li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li><li>栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</p><p>本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626110717.png"></p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>所有对象都在这里分配内存，是垃圾收集的主要区域（”GC 堆”）。</p><p>现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：</p><p>新生代（Young Generation）<br>老年代（Old Generation）<br>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</p><p>HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。</p><p>方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。在 JDK 1.8 之后，原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等放入堆中。</p><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。</p><h3 id="判断一个对象是否可被回收"><a href="#判断一个对象是否可被回收" class="headerlink" title="判断一个对象是否可被回收"></a>判断一个对象是否可被回收</h3><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p><p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Test</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        a.instance = b;</span><br><span class="line">        b.instance = a;</span><br><span class="line">        a = <span class="literal">null</span>;</span><br><span class="line">        b = <span class="literal">null</span>;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，a 与 b 引用的对象实例互相持有了对象的引用，因此当我们把对 a 对象与 b 对象的引用去除之后，由于两个对象还存在互相之间的引用，导致两个 Test 对象无法被回收。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626164856.png"></p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p><p>Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：</p><ul><li>虚拟机栈中局部变量表中引用的对象</li><li>本地方法栈中 JNI 中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中的常量引用的对象</li></ul><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626165040.png"></p><h4 id="方法区的回收"><a href="#方法区的回收" class="headerlink" title="方法区的回收"></a>方法区的回收</h4><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。</p><p>主要是对常量池的回收和对类的卸载。</p><p>为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。</p><p>类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：</p><ul><li>该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li></ul><h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h4><p>类似 C++ 的析构函数，用于关闭外部资源。但是 try-finally 等方式可以做得更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。</p><p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p><p>Java 提供了四种强度不同的引用类型。</p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>被强引用关联的对象不会被回收。</p><p>使用 new 一个新对象的方式来创建强引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p><p>使用 SoftReference 类来创建软引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="literal">null</span>;  <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p><p>使用 WeakReference 类来创建弱引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p><p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p><p>使用 PhantomReference 来创建虚引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;Object&gt;(obj, <span class="literal">null</span>);</span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记 - 清除"></a>标记 - 清除</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626201313.png"></p><p>在标记阶段，程序会检查每个对象是否为活动对象，如果是活动对象，则程序会在对象头部打上标记。</p><p>在清除阶段，会进行对象回收并取消标志位，另外，还会判断回收后的分块与前一个空闲分块是否连续，若连续，会合并这两个分块。回收对象就是把对象作为分块，连接到被称为 “空闲链表” 的单向链表，之后进行分配时只需要遍历这个空闲链表，就可以找到分块。</p><p>在分配时，程序会搜索空闲链表寻找空间大于等于新对象大小 size 的块 block。如果它找到的块等于 size，会直接返回这个分块；如果找到的块大于 size，会将块分割成大小为 size 与 (block - size) 的两部分，返回大小为 size 的分块，并把大小为 (block - size) 的块返回给空闲链表。</p><p>不足：</p><ul><li>标记和清除过程效率都不高；</li><li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li></ul><h4 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记 - 整理"></a>标记 - 整理</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626201444.png"></p><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p>优点:</p><ul><li>不会产生内存碎片</li></ul><p>不足:</p><ul><li>需要移动大量对象，处理效率比较低。</li></ul><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626201524.png"></p><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><p>现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。</p><p>HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。</p><h4 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h4><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代。</p><p>新生代使用：复制算法<br>老年代使用：标记 - 清除 或者 标记 - 整理 算法</p><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626214223.png"></p><p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><ul><li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；</li><li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li></ul><h4 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626215742.png"></p><p>Serial 翻译为串行，也就是说它以串行的方式执行。</p><p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p><p>它的优点是简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>它是 Client 场景下的默认新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的。</p><h4 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626215824.png"></p><p>它是 Serial 收集器的多线程版本。</p><p>它是 Server 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合使用。</p><h4 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h4><p>与 ParNew 一样是多线程收集器。</p><p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p><p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p><p>可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p><h4 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626215905.png"></p><p>是 Serial 收集器的老年代版本，也是给 Client 场景下的虚拟机使用。如果用在 Server 场景下，它有两大用途：</p><ul><li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。</li><li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li></ul><h4 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626215946.png"></p><p>是 Parallel Scavenge 收集器的老年代版本。</p><p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p><h4 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h4><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626220011.png"></p><p>CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。</p><p>分为以下四个流程：</p><ul><li>初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除：不需要停顿。</li></ul><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点：</p><ul><li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li><li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li><li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li></ul><h4 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h4><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626220154.png"></p><p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626220213.png"></p><p>过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626220251.png"></p><p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p>具备如下特点：</p><ul><li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul><h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><h3 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h3><ul><li><p>Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。</p></li><li><p>Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。</p></li></ul><h3 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h3><h4 id="对象优先在-Eden-分配"><a href="#对象优先在-Eden-分配" class="headerlink" title="对象优先在 Eden 分配"></a>对象优先在 Eden 分配</h4><p>大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。</p><h4 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h4><p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</p><p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p><p>-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。</p><h4 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h4><p>为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。</p><p>-XX:MaxTenuringThreshold 用来定义年龄的阈值。</p><h4 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h4><p>虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。</p><h4 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h4><p>在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。</p><p>如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。</p><h3 id="Full-GC-的触发条件"><a href="#Full-GC-的触发条件" class="headerlink" title="Full GC 的触发条件"></a>Full GC 的触发条件</h3><p>对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p><h4 id="调用-System-gc"><a href="#调用-System-gc" class="headerlink" title="调用 System.gc()"></a>调用 System.gc()</h4><p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p><h4 id="老年代空间不足"><a href="#老年代空间不足" class="headerlink" title="老年代空间不足"></a>老年代空间不足</h4><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p><p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p><h4 id="空间分配担保失败"><a href="#空间分配担保失败" class="headerlink" title="空间分配担保失败"></a>空间分配担保失败</h4><p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。</p><h4 id="JDK-1-7-及以前的永久代空间不足"><a href="#JDK-1-7-及以前的永久代空间不足" class="headerlink" title="JDK 1.7 及以前的永久代空间不足"></a>JDK 1.7 及以前的永久代空间不足</h4><p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。</p><p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</p><p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</p><h4 id="Concurrent-Mode-Failure"><a href="#Concurrent-Mode-Failure" class="headerlink" title="Concurrent Mode Failure"></a>Concurrent Mode Failure</h4><p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。</p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626220828.png"></p><p>包括以下 7 个阶段：</p><ul><li>加载（Loading）</li><li>验证（Verification）</li><li>准备（Preparation）</li><li>解析（Resolution）</li><li>初始化（Initialization）</li><li>使用（Using）</li><li>卸载（Unloading）</li></ul><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p>包含了加载、验证、准备、解析和初始化这 5 个阶段。</p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载是类加载的一个阶段，注意不要混淆。</p><p>加载过程完成以下三件事：</p><ul><li>通过类的完全限定名称获取定义该类的二进制字节流。</li><li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。</li></ul><p>其中二进制字节流可以从以下方式中获取：</p><ul><li>从 ZIP 包读取，成为 JAR、EAR、WAR 格式的基础。</li><li>从网络中获取，最典型的应用是 Applet。</li><li>运行时计算生成，例如动态代理技术，在 java.lang.reflect.Proxy 使用 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。</li><li>由其他文件生成，例如由 JSP 文件生成对应的 Class 类。</li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>类变量是被 static 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。</p><p>实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p><p>初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>将常量池的符号引用替换为直接引用的过程。</p><p>其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段才真正开始执行类中定义的 Java 程序代码。初始化阶段是虚拟机执行类构造器 &lt;clinit&gt;() 方法的过程。在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。</p><p><clinit>() 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">0</span>;                <span class="comment">// 给变量赋值可以正常编译通过</span></span><br><span class="line">        System.out.print(i);  <span class="comment">// 这句编译器会提示“非法向前引用”</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于父类的 <clinit>() 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类。例如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">A</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        A = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">B</span> <span class="operator">=</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     System.out.println(Sub.B);  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 <clinit>() 方法。但接口与类不同的是，执行接口的 <clinit>() 方法不需要先执行父接口的 <clinit>() 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 <clinit>() 方法。</p><p>虚拟机会保证一个类的 <clinit>() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 <clinit>() 方法，其它线程都会阻塞等待，直到活动线程执行 <clinit>() 方法完毕。如果在一个类的 <clinit>() 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。</p><h3 id="类初始化时机"><a href="#类初始化时机" class="headerlink" title="类初始化时机"></a>类初始化时机</h3><h4 id="主动引用"><a href="#主动引用" class="headerlink" title="主动引用"></a>主动引用</h4><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：</p><ul><li><p>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。</p></li><li><p>使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。</p></li><li><p>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</p></li><li><p>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；</p></li><li><p>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；</p></li></ul><h4 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h4><p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p><p>通过子类引用父类的静态字段，不会导致子类初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(SubClass.value);  <span class="comment">// value 字段在 SuperClass 中定义</span></span><br></pre></td></tr></table></figure><p>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SuperClass[] sca = <span class="keyword">new</span> <span class="title class_">SuperClass</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ConstClass.HELLOWORLD);</span><br></pre></td></tr></table></figure><h3 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h3><p>两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。</p><p>这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。</p><h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><p>从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：</p><ul><li><p>启动类加载器（Bootstrap ClassLoader），使用 C++ 实现，是虚拟机自身的一部分；</p></li><li><p>所有其它类的加载器，使用 Java 实现，独立于虚拟机，继承自抽象类 java.lang.ClassLoader。</p></li></ul><p>从 Java 开发人员的角度看，类加载器可以划分得更细致一些：</p><ul><li><p>启动类加载器（Bootstrap ClassLoader）此类加载器负责将存放在 <JRE_HOME>\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。</p></li><li><p>扩展类加载器（Extension ClassLoader）这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 <JAVA_HOME>&#x2F;lib&#x2F;ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</p></li><li><p>应用程序类加载器（Application ClassLoader）这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p></li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>应用程序是由三种类加载器互相配合从而实现类加载，除此之外还可以加入自己定义的类加载器。</p><p>下图展示了类加载器之间的层次关系，称为双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。这里的父子关系一般通过组合关系（Composition）来实现，而不是继承关系（Inheritance）。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626221637.png"></p><h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><p>一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时才尝试自己加载。</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。</p><p>例如 java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 并放到 ClassPath 中，程序可以编译通过。由于双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高，这是因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。rt.jar 中的 Object 优先级更高，那么程序中所有的 Object 都是这个 Object。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">// The parent class loader for delegation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动移类加载器实现"><a href="#自动移类加载器实现" class="headerlink" title="自动移类加载器实现"></a>自动移类加载器实现</h3><p>以下代码中的 FileSystemClassLoader 是自定义类加载器，继承自 java.lang.ClassLoader，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。</p><p>java.lang.ClassLoader 的 loadClass() 实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 findClass() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileSystemClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rootDir;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileSystemClassLoader</span><span class="params">(String rootDir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classData = getClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getClassData(String className) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> classNameToPath(className);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">4096</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[bufferSize];</span><br><span class="line">            <span class="type">int</span> bytesNumRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, bytesNumRead);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">classNameToPath</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rootDir + File.separatorChar</span><br><span class="line">                + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul><li>JVM 的内存模型和分区 - 详细到每个区放什么？</li><li>堆里面的分区有哪些？Eden，from，to，老年区，说说他们的特点。</li><li>GC 的算法有哪些？标记清除、标记整理、复制算法、引用计数器，怎么用的？</li><li>轻GC 和重GC 分别在什么时候发生？</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8</a></li></ul></br></br>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626223006.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;JVM-体系结构&quot;&gt;&lt;a href=&quot;#JVM-体系结构&quot; clas</summary>
      
    
    
    
    <category term="专业知识" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="java" scheme="https://blog.haxianhe.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 核心技术 - 日志</title>
    <link href="https://blog.haxianhe.com/2022/03/10/cs-basic/cs-basic-language/cs-basic-language-java/Java%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20%E6%97%A5%E5%BF%97/"/>
    <id>https://blog.haxianhe.com/2022/03/10/cs-basic/cs-basic-language/cs-basic-language-java/Java%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20%E6%97%A5%E5%BF%97/</id>
    <published>2022-03-09T23:41:00.000Z</published>
    <updated>2024-01-17T16:46:36.158Z</updated>
    
    <content type="html"><![CDATA[<p>刚学习 Java 的时候我们都是用 <code>System.out.println()</code> 来打印我们的输出结果，但是在实际工作中除了单元测试几乎不会使用这种输出方式。</p><p>这是为什么呢？</p><p>这主要是因为 <code>System.out.println()</code> 会将内容打印到控制台，线上会打印到 tomcat 控制台，这样：</p><ol><li>严重影响程序性能</li><li>不方便后续排查问题的时候查看和使用</li></ol><p>那生产环境怎么查看程序运行和异常信息呢？</p><p>答案就是：Log</p><p>线上主要使用log4j2或者logback这些第三方库的异步方法，进行日志的统一收集。</p><p>输出日志，而不是用System.out.println()，有以下几个好处</p><ol><li>可以设置输出样式，避免自己每次都写”ERROR: “ + var；</li><li>可以设置输出级别，禁止某些级别输出。例如，只输出错误日志；</li><li>可以被重定向到文件，这样可以在程序运行结束后查看日志；</li><li>可以按包名控制日志级别，只输出某些包打的日志；</li><li>可以……</li></ol><p>那如何使用日志？下面我们就来逐一进行介绍。</p><h2 id="Commons-Logging"><a href="#Commons-Logging" class="headerlink" title="Commons Logging"></a>Commons Logging</h2><p>Commons Logging是一个第三方日志库，它是由Apache创建的日志模块。</p><p>Commons Logging的特色是，它可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统。默认情况下，Commons Loggin自动搜索并使用Log4j（Log4j是另一个流行的日志系统），如果没有找到Log4j，再使用JDK Logging。</p><p>使用Commons Logging只需要和两个类打交道，并且只有两步：</p><p>第一步，通过LogFactory获取Log类的实例； 第二步，使用Log实例的方法打日志。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(Main.class);</span><br><span class="line">        log.info(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;end.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，肯定会得到编译错误，类似error: package org.apache.commons.logging does not exist（找不到org.apache.commons.logging这个包）。</p><p>可以在pom里配置下，比如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>前面介绍了Commons Logging，可以作为“日志接口”来使用。而真正的“日志实现”可以使用Log4j。</p><p>Log4j是一种非常流行的日志框架。</p><p>Log4j是一个组件化设计的日志系统，它的架构大致如下：</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626230938.png"></p><p>当我们使用Log4j输出一条日志时，Log4j自动通过不同的Appender把同一条日志输出到不同的目的地。例如：</p><p>console：输出到屏幕；<br>file：输出到文件；<br>socket：通过网络输出到远程计算机；<br>jdbc：输出到数据库<br>在输出日志的过程中，通过Filter来过滤哪些log需要被输出，哪些log不需要被输出。例如，仅输出ERROR级别的日志。</p><p>最后，通过Layout来格式化日志信息，例如，自动添加日期、时间、方法名称等信息。</p><p>上述结构虽然复杂，但我们在实际使用的时候，并不需要关心Log4j的API，而是通过配置文件来配置它。</p><p>以XML配置为例，使用Log4j的时候，我们把一个log4j2.xml的文件放到classpath下就可以让Log4j读取配置文件并按照我们的配置来输出日志。下面是一个配置文件的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;log.pattern&quot;</span>&gt;</span>%d&#123;MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125;%n%msg%n%n<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义文件名变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;file.err.filename&quot;</span>&gt;</span>log/err.log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;file.err.pattern&quot;</span>&gt;</span>log/err.%i.log.gz<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义Appender，即目的地 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义输出到屏幕 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志格式引用上面定义的log.pattern --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;log.pattern&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义输出到文件,文件名引用上面定义的file.err.filename --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;err&quot;</span> <span class="attr">bufferedIO</span>=<span class="string">&quot;true&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;file.err.filename&#125;&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;file.err.pattern&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;log.pattern&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 根据文件大小自动切割日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;1 MB&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 保留最近10份 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对info级别的日志，输出到console --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对error级别的日志，输出到err，即上面定义的RollingFile --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;err&quot;</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然配置Log4j比较繁琐，但一旦配置完成，使用起来就非常方便。对上面的配置文件，凡是INFO级别的日志，会自动输出到屏幕，而ERROR级别的日志，不但会输出到屏幕，还会同时输出到文件。并且，一旦日志文件达到指定大小（1MB），Log4j就会自动切割新的日志文件，并最多保留10份。</p><p>同样 Log4j 也需要在pom里配置下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SLF4J和Logback"><a href="#SLF4J和Logback" class="headerlink" title="SLF4J和Logback"></a>SLF4J和Logback</h2><p>前面介绍了Commons Logging和Log4j这一对好基友，它们一个负责充当日志API，一个负责实现日志底层，搭配使用非常便于开发。</p><p>有的童鞋可能还听说过SLF4J和Logback。这两个东东看上去也像日志，它们又是啥？</p><p>其实SLF4J类似于Commons Logging，也是一个日志接口，而Logback类似于Log4j，是一个日志的实现。</p><p>为什么有了Commons Logging和Log4j，又会蹦出来SLF4J和Logback？这是因为Java有着非常悠久的开源历史，不但OpenJDK本身是开源的，而且我们用到的第三方库，几乎全部都是开源的。开源生态丰富的一个特定就是，同一个功能，可以找到若干种互相竞争的开源库。</p><p>因为对Commons Logging的接口不满意，有人就搞了SLF4J。因为对Log4j的性能不满意，有人就搞了Logback。</p><p>我们先来看看SLF4J对Commons Logging的接口有何改进。在Commons Logging中，我们要打印日志，有时候得这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">p.setScore(score);</span><br><span class="line">log.info(<span class="string">&quot;Set score &quot;</span> + score + <span class="string">&quot; for Person &quot;</span> + p.getName() + <span class="string">&quot; ok.&quot;</span>);</span><br></pre></td></tr></table></figure><p>拼字符串是一个非常麻烦的事情，所以SLF4J的日志接口改进成这样了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">p.setScore(score);</span><br><span class="line">logger.info(<span class="string">&quot;Set score &#123;&#125; for Person &#123;&#125; ok.&quot;</span>, score, p.getName());</span><br></pre></td></tr></table></figure><p>SLF4J的日志接口传入的是一个带占位符的字符串，用后面的变量自动替换占位符，所以看起来更加自然。</p><p>如何使用SLF4J？它的接口实际上和Commons Logging几乎一模一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样需要在pom里配置一下要使用的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和Log4j类似，我们仍然需要一个Logback的配置文件，把logback.xml放到classpath下，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>log/output.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/output.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>首先贴一下我的代码</p><p>DateTimeUtils.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haxianhe.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haxianhe haxianhe@gmail.com</span></span><br><span class="line"><span class="comment"> * Created on 2022-02-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(DateTimeUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DateTimeFormatter</span> <span class="variable">FORMATTER_TIME</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  当前的时间，HH:mm:ss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">currentTime</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;调用方法: &#123;&#125;&quot;</span>, <span class="string">&quot;currentTime&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> LocalTime.now().format(FORMATTER_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DateUtilsTest.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com.haxianhe.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.haxianhe.utils.DateTimeUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> haxianhe &lt;haxianhe@gmail.com&gt;</span></span><br><span class="line"><span class="comment"> * Created on 2022-02-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtilsTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDayOfWeekTest</span><span class="params">()</span> &#123;</span><br><span class="line">        DateTimeUtils.currentTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序运行后在log里打印的内容如下</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20220626231005.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264738932870688">使用Commons Logging</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264739436350112">使用Log4j</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264739155914176">使用SLF4J和Logback</a></li></ul><br><br>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚学习 Java 的时候我们都是用 &lt;code&gt;System.out.println()&lt;/code&gt; 来打印我们的输出结果，但是在实际工作中除了单元测试几乎不会使用这种输出方式。&lt;/p&gt;
&lt;p&gt;这是为什么呢？&lt;/p&gt;
&lt;p&gt;这主要是因为 &lt;code&gt;System.out.</summary>
      
    
    
    
    <category term="专业知识" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="java" scheme="https://blog.haxianhe.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2021 年终总结</title>
    <link href="https://blog.haxianhe.com/2022/01/06/summary/2021%20%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.haxianhe.com/2022/01/06/summary/2021%20%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-06T12:50:00.000Z</published>
    <updated>2024-01-17T18:01:24.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>2021年工作上最大的变化就是年初换了工作，从待了两年半的上家公司离开了，来了快手。</p><h3 id="跳槽快手"><a href="#跳槽快手" class="headerlink" title="跳槽快手"></a>跳槽快手</h3><p>年初的时候面了很多家公司，最后接了快手的offer。</p><p>先说说为什么要换工作，主要有两点考虑：</p><ol><li>为了薪资，适当跳槽可以拿到更客观的薪资。</li><li>工作上遇到了瓶颈，党哥之前一直要求在稳定性上做更多的工作。但是一直没有懂怎么做。所以想换一个环境去学习。</li></ol><p>面试后总结，写的文章：</p><ul><li><a href="https://blog.haxianhe.com/2021/02/27/CS-Interview/social-interview/">涨薪50%，从小厂逆袭快手 - 附面经</a></li><li><a href="https://blog.haxianhe.com/2021/03/04/CS-Interview/how-to-ready-interview/">从小厂逆袭快手，我是如何准备面试的</a></li><li><a href="https://blog.haxianhe.com/2021/04/21/CS-Interview/from_php2java/">从小厂逆袭快手，我是如何从PHP转Java的</a></li></ul><h3 id="转正"><a href="#转正" class="headerlink" title="转正"></a>转正</h3><p>转正前自己压力非常大，因为当时正在降本增效，很担心自己被裁掉…还好最后还是过了。</p><h3 id="职业化"><a href="#职业化" class="headerlink" title="职业化"></a>职业化</h3><p>但是，转正后第一次沟通绩效也遇到了之前在顺丰时的问题：“1.技术能力有待加强。2.做事情需要更仔细，考虑更周到，简单来说就是最高标准。3.就是对外沟通方面做的比较好。”。</p><p>事后，结合自己换工作以来的一些思考以及学习的课程，知道了自己面对的问题——职业化。</p><p>职业化，被最大程度误解的一个词，职业化意味着你从原来的父子模式（你给我钱，给我空间，我去成长）、师生模式（你是老师，我是学生，你教我，我学）到交易模式（我出卖我的智力、体力、能力，你给我报酬）的转变。</p><p>对事：</p><ul><li>能不能在一张A4纸上把业务工作流程画出来，能不能把业务对接的上、下游流程画出来</li><li>明确你是来解决什么问题的，然后把它解决好（技术、需求、线上稳定性）<br>对人：</li><li>每周请一个新的人吃饭，弱关系</li></ul><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>21年读书没有达成目标，这一年只看了《原则》《被讨厌的勇气》这两本书，今年上半年主要在忙着换工作，适应新的工作环境，下半年主要在忙着转正的事，此外这一年也挺折腾的，作息也不是很规律，22年还是要调整回原来的状态的✊。</p><p>21年的读书笔记</p><ul><li><a href="https://blog.haxianhe.com/2021/09/08/Book-Notes-Self/%E5%8E%9F%E5%88%99/">以史为鉴 - 读《原则》</a></li><li><a href="https://blog.haxianhe.com/2021/10/26/Book-Notes-Psycholog/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/">人是可以改变的-读《被讨厌的勇气》</a></li></ul><h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><p>健身也没有完成目标，21年一方面调整一下设置目标的方式，另一方面降低一下目标阈值，先保证目标具有可完成性。</p><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><p>21年旅行目标几乎完成（有两座城市不是第一次去…）</p><p>21年去过的城市：</p><ul><li>广州 </li><li>青岛</li><li>长沙</li><li>杭州</li><li>重庆</li></ul><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><p>21年年初又一波大的亏损，亏了几万块钱。后面投资策略就彻底放弃了哪些乱七八糟的技巧了。</p><p>目前主要投资有两个：</p><ol><li>我要稳稳的幸福定投，有闲钱全部投到这个上。</li><li>指数基金，主要投资标的：沪深300、中证500、中证红利、上证50、深证100、创业板50、兴全合润、富国天惠、恒生ETF、恒生科技、标普500、纳斯达克100、中概互联。</li></ol><h2 id="21年目标回顾"><a href="#21年目标回顾" class="headerlink" title="21年目标回顾"></a>21年目标回顾</h2><ul><li>技术-学习：从项目经验、技术原理、基础知识等三个角度去点亮自己的技术地图，坚持 <a href="https://leetcode-cn.com/progress/">每天刷一道 LeetCode 上的题目</a>。<ul><li>没完成，差的太多。</li></ul></li><li>投资：继续坚持基金定投，目标 <strong>年化收益达到30%</strong> 。<ul><li>没完成，差的太多。</li></ul></li><li>写作：以技术为主线 <strong>坚持每周发表一篇文章</strong>。<ul><li>没完成，差的太多。</li></ul></li><li>读书：读书还是要坚持下去的，<strong>坚持每周读一本书</strong>。<ul><li>没完成，差的太多</li></ul></li><li>健身：身体才是一切的基础，没有一个好身体一切都是空谈，<strong>每周练三次，每次一个小时</strong>。<ul><li>没完成，差的太多。</li></ul></li><li>旅行：旅行是最好的放松方式，目标 <strong>去3个自己没去过的城市</strong>。<ul><li>基本完成。</li></ul></li></ul><h2 id="22年目标"><a href="#22年目标" class="headerlink" title="22年目标"></a>22年目标</h2><ul><li>读书24本</li><li>健身96次</li><li>旅行去2个没去过的省份</li><li>理财<ul><li>定投账户 - 年化5%</li><li>100份账户 - 不亏钱</li></ul></li><li>考研</li><li>写作24篇</li></ul><h2 id="个人-Milestone"><a href="#个人-Milestone" class="headerlink" title="个人 Milestone"></a>个人 Milestone</h2><ul><li>跳槽快手</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h2&gt;&lt;p&gt;2021年工作上最大的变化就是年初换了工作，从待了两年半的上家公司离开了，来了快手。&lt;/p&gt;
&lt;h3 id=&quot;跳槽快手&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年终总结" scheme="https://blog.haxianhe.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>人是可以改变的-读《被讨厌的勇气》</title>
    <link href="https://blog.haxianhe.com/2021/10/26/book-notes/book-notes-psycholog/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/"/>
    <id>https://blog.haxianhe.com/2021/10/26/book-notes/book-notes-psycholog/%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/</id>
    <published>2021-10-25T16:00:00.000Z</published>
    <updated>2024-01-06T06:06:54.287Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/haxianhe/image/raw/master/ks-computer-image/20211026154512.png"></p><p>《被讨厌的勇气》<br>作者：【日】安见一郎 古贺史健<br>译者：渠海峡<br>出版社：北京，机械工业出版社，2015</p><hr><h1 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h1><p>首先我们来介绍一下阿德勒的个体心理学是什么。</p><h2 id="与弗洛伊德心理创伤学说的区别"><a href="#与弗洛伊德心理创伤学说的区别" class="headerlink" title="与弗洛伊德心理创伤学说的区别"></a>与弗洛伊德心理创伤学说的区别</h2><table><thead><tr><th>个体心理学</th><th>解释</th><th>心理创伤学说</th><th>解释</th></tr></thead><tbody><tr><td>目的论</td><td>为了达成目的，赋予经历以意义</td><td>原因论</td><td>因为过去的某段经历所以痛苦</td></tr><tr><td>整体论</td><td>-</td><td>二元论</td><td>-</td></tr><tr><td>此时此刻</td><td>-</td><td>纠结过去</td><td>-</td></tr></tbody></table><p><strong>目的论 VS 原因论</strong></p><p>弗洛伊德主张“<strong>原因论</strong>”，即你之所以痛苦是因为过去的某段经历。而阿德勒主张的是“<strong>目的论</strong>”，即你为了达成你的“目的”，赋予了你过去经历以某种意义。</p><p>在“人是可以改变的”这个前提下，每个人的生活方式（世界观、人生观）是自己选择的。而正因为生活方式是自己选择的，那就可以重新进行选择。</p><p><strong>整体论 VS 二元论</strong></p><p>把人看作不可分割的存在和作为“整体的我”来考虑的方式叫作“整体论”。</p><p><strong>此时此刻 VS 纠结过去</strong></p><p>因为过去和未来根本不存在，所以才要谈现在。起决定作用的既不是昨天也不是明天，而是“此时此刻”。</p><h2 id="勇气的心理学"><a href="#勇气的心理学" class="headerlink" title="勇气的心理学"></a>勇气的心理学</h2><ul><li>被讨厌的勇气</li><li>甘于平凡的勇气</li><li>获得幸福的勇气<ul><li>幸福即贡献感</li><li>前提：自由，不再寻求认可</li></ul></li></ul><h2 id="提出目标"><a href="#提出目标" class="headerlink" title="提出目标"></a>提出目标</h2><ul><li>行为方面的目标<ul><li>自立</li><li>与社会和谐共处</li></ul></li><li>支撑这种行为的心理方面目标<ul><li>“我有能力”的意识</li><li>“人人都是我的伙伴”的意识</li></ul></li></ul><h1 id="“病因”人际关系"><a href="#“病因”人际关系" class="headerlink" title="“病因”人际关系"></a>“病因”人际关系</h1><p>人际关系是一切的烦恼之源。</p><h2 id="烦恼来源"><a href="#烦恼来源" class="headerlink" title="烦恼来源"></a>烦恼来源</h2><p><strong>追求优越性</strong>：人无力的存活在这个世界上，并且希望摆脱这种状态，继而就有了普遍欲求。可以理解为“希望进步”、“追求理想状态”。</p><p><strong>自卑感</strong>：人追求优越性这一“希望进步的状态”之中，树立某写理想或目标并努力为之奋斗。同时对于无法达成理想的自己就会产生一种自卑感。</p><p><strong>自卑情结</strong>：指把自己的自卑感当作某种借口使用的状态。具体就像“我因为学历低所以无法成功”之类的。</p><p><strong>夸耀不幸</strong>：以自己的不幸来支配对方。</p><h2 id="矛盾起源"><a href="#矛盾起源" class="headerlink" title="矛盾起源"></a>矛盾起源</h2><p><strong>基本上，一切人际关系矛盾都起因于对别人的课题妄加干涉或者自己的课题被别人妄加干涉。</strong></p><h2 id="人生课题"><a href="#人生课题" class="headerlink" title="人生课题"></a>人生课题</h2><ul><li>工作课题</li><li>交友课题</li><li>爱的课题</li></ul><p>人生最大的谎言就是逃避人生课题。</p><h1 id="“处方”解决方式"><a href="#“处方”解决方式" class="headerlink" title="“处方”解决方式"></a>“处方”解决方式</h1><h2 id="入口-出发点：课题分离"><a href="#入口-出发点：课题分离" class="headerlink" title="入口&#x2F;出发点：课题分离"></a>入口&#x2F;出发点：课题分离</h2><p>我们必须从“这是谁的课题”这一观点出发，把自己的课题与别人的课题分离开来。</p><p><strong>辨别方法：只需要考虑“某种选择带来的结果最终要由谁来承担”</strong></p><p>可以把马带到水边，但不能强迫其喝水。</p><p>能改变自己的只有自己。</p><h2 id="支撑点-基本原理：横向关系"><a href="#支撑点-基本原理：横向关系" class="headerlink" title="支撑点&#x2F;基本原理：横向关系"></a>支撑点&#x2F;基本原理：横向关系</h2><p>阿德勒心理学反对一切纵向关系，提倡把所有的人际关系都看作横向关系。</p><h2 id="终极目标：共同体感觉"><a href="#终极目标：共同体感觉" class="headerlink" title="终极目标：共同体感觉"></a>终极目标：共同体感觉</h2><ul><li>自我接纳</li><li>他者信赖</li><li>他者贡献</li></ul><p><strong>通过他者贡献让自己有“我对共同体有用”的主观体会-&gt;感觉到自己的价值-&gt;获得勇气</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/haxianhe/image/raw/master/ks-computer-image/20211026154512.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;《被讨厌的勇气》&lt;br&gt;作者：【日】安见一郎 古贺史健&lt;br&gt;译者：渠海峡</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://blog.haxianhe.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="心理学" scheme="https://blog.haxianhe.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 核心技术 - 其他问题</title>
    <link href="https://blog.haxianhe.com/2021/09/25/cs-basic/cs-basic-middleware/cs-basic-middleware-mysql/MySQL%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.haxianhe.com/2021/09/25/cs-basic/cs-basic-middleware/cs-basic-middleware-mysql/MySQL%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%20-%20%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98/</id>
    <published>2021-09-24T23:00:07.000Z</published>
    <updated>2024-01-17T18:16:57.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote><p>在实际业务中经常会使用到 JSON 数据类型，在查询过程中主要有两种使用需求：</p><ol><li>在 where 条件中有通过 json 中的某个字段去过滤返回结果的需求</li><li>查询 json 字段中的部分字段作为返回结果（减少内存占用）</li></ol></blockquote><h2 id="JSON-CONTAINS"><a href="#JSON-CONTAINS" class="headerlink" title="JSON_CONTAINS"></a>JSON_CONTAINS</h2><p><strong>JSON_CONTAINS(target, candidate[, path])</strong></p><p><strong>如果在 json 字段 target 指定的位置 path，找到了目标值 condidate，返回 1，否则返回 0</strong></p><p><strong>如果只是检查在指定的路径是否存在数据，使用JSON_CONTAINS_PATH()</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@j</span> <span class="operator">=</span> <span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: &#123;&quot;d&quot;: 4&#125;&#125;&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@j2</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.a&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.a&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.b&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.b&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                             <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@j2</span> <span class="operator">=</span> <span class="string">&#x27;&#123;&quot;d&quot;: 4&#125;&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.a&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.a&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                             <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.c&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS(<span class="variable">@j</span>, <span class="variable">@j2</span>, <span class="string">&#x27;$.c&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+</span></span><br></pre></td></tr></table></figure><h2 id="JSON-CONTAINS-PATH"><a href="#JSON-CONTAINS-PATH" class="headerlink" title="JSON_CONTAINS_PATH"></a>JSON_CONTAINS_PATH</h2><p><strong>JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] …)</strong></p><p><strong>如果在指定的路径存在数据返回 1，否则返回 0</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="variable">@j</span> <span class="operator">=</span> <span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: &#123;&quot;d&quot;: 4&#125;&#125;&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;$.a&#x27;</span>, <span class="string">&#x27;$.e&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;$.a&#x27;</span>, <span class="string">&#x27;$.e&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;$.a&#x27;</span>, <span class="string">&#x27;$.e&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;$.a&#x27;</span>, <span class="string">&#x27;$.e&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;$.c.d&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;$.c.d&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------+</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;$.a.d&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> JSON_CONTAINS_PATH(<span class="variable">@j</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;$.a.d&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------+</span></span><br></pre></td></tr></table></figure><p>实际使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$conds</span> = <span class="keyword">new</span> <span class="title class_">Criteria</span>();</span><br><span class="line"><span class="variable">$conds</span>-&gt;<span class="title function_ invoke__">andWhere</span>(<span class="string">&#x27;dept_code&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="variable">$deptCodes</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$aoiAreaId</span>)) &#123;</span><br><span class="line">    <span class="variable">$aoiAreaIdCond</span> = <span class="keyword">new</span> <span class="title class_">Criteria</span>();</span><br><span class="line">    <span class="variable">$aoiAreaIdCond</span>-&gt;<span class="title function_ invoke__">orWhere</span>(<span class="string">&quot;JSON_CONTAINS_PATH(new_aoi_area_ids,&#x27;one&#x27;, &#x27;$.\&quot;<span class="subst">$aoiAreaId</span>\&quot;&#x27;)&quot;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$aoiAreaIdCond</span>-&gt;<span class="title function_ invoke__">orWhere</span>(<span class="string">&quot;JSON_CONTAINS_PATH(old_aoi_area_ids,&#x27;one&#x27;, &#x27;$.\&quot;<span class="subst">$aoiAreaId</span>\&quot;&#x27;)&quot;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$conds</span>-&gt;<span class="title function_ invoke__">andWhere</span>(<span class="variable">$aoiAreaIdCond</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="column-path、column-path"><a href="#column-path、column-path" class="headerlink" title="column-&gt;path、column-&gt;&gt;path"></a>column-&gt;path、column-&gt;&gt;path</h2><p><strong>获取指定路径的值</strong></p><p><strong>-&gt; vs -&gt;&gt;</strong></p><p>Whereas the -&gt; operator simply extracts a value, the -&gt;&gt; operator in addition unquotes the extracted result.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> jemp <span class="keyword">WHERE</span> g <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+------+</span></span><br><span class="line"><span class="operator">|</span> c                             <span class="operator">|</span> g    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+------+</span></span><br><span class="line"><span class="operator">|</span> &#123;&quot;id&quot;: &quot;3&quot;, &quot;name&quot;: &quot;Barney&quot;&#125; <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> &#123;&quot;id&quot;: &quot;4&quot;, &quot;name&quot;: &quot;Betty&quot;&#125;  <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> c<span class="operator">-</span><span class="operator">&gt;</span><span class="string">&#x27;$.name&#x27;</span> <span class="keyword">AS</span> name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">FROM</span> jemp <span class="keyword">WHERE</span> g <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> &quot;Barney&quot; <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> &quot;Betty&quot;  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> JSON_UNQUOTE(c<span class="operator">-</span><span class="operator">&gt;</span><span class="string">&#x27;$.name&#x27;</span>) <span class="keyword">AS</span> name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">FROM</span> jemp <span class="keyword">WHERE</span> g <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> Barney <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Betty  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> c<span class="operator">-</span><span class="operator">&gt;&gt;</span><span class="string">&#x27;$.name&#x27;</span> <span class="keyword">AS</span> name</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">FROM</span> jemp <span class="keyword">WHERE</span> g <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> Barney <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Betty  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>实际使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$retTask</span> = <span class="title class_">AoiAreaTaskOrm</span>::<span class="title function_ invoke__">findRows</span>([<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;extra_info-&gt;&gt;&quot;$.new_aoi_area_infos&quot; as new_aoi_area_infos&#x27;</span>, <span class="string">&#x27;extra_info-&gt;&gt;&quot;$.old_aoi_area_infos&quot; as old_aoi_area_infos&#x27;</span>], <span class="variable">$cond</span>);</span><br></pre></td></tr></table></figure><h1 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h1><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><p>记 A-&gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</p><p>如果 {A1，A2，… ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。</p><p>对于 A-&gt;B，如果能找到 A 的真子集 A’，使得 A’-&gt; B，那么 A-&gt;B 就是部分函数依赖，否则就是完全函数依赖。</p><p>对于 A-&gt;B，B-&gt;C，则 A-&gt;C 是一个传递函数依赖</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>以下的学生课程关系的函数依赖为 {Sno, Cname} -&gt; {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。</p><table><thead><tr><th align="center">Sno</th><th align="center">Sname</th><th align="center">Sdept</th><th align="center">Mname</th><th align="center">Cname</th><th align="center">Grade</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">学生-1</td><td align="center">学院-1</td><td align="center">院长-1</td><td align="center">课程-1</td><td align="center">90</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-2</td><td align="center">80</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-1</td><td align="center">100</td></tr><tr><td align="center">3</td><td align="center">学生-3</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-2</td><td align="center">95</td></tr></tbody></table><p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p><ul><li>冗余数据：例如 <code>学生-2</code> 出现了两次。</li><li>修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。</li><li>删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 <code>课程-1</code> 需要删除第一行和第三行，那么 <code>学生-1</code> 的信息就会丢失。</li><li>插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</li></ul><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>范式理论是为了解决以上提到四种异常。</p><p>高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。</p><p><strong>第一范式 (1NF)</strong></p><p>属性不可分。</p><p><strong>第二范式 (2NF)</strong></p><p>每个非主属性完全函数依赖于键码。</p><p>可以通过分解来满足。</p><p><strong>分解前</strong></p><table><thead><tr><th align="center">Sno</th><th align="center">Sname</th><th align="center">Sdept</th><th align="center">Mname</th><th align="center">Cname</th><th align="center">Grade</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">学生-1</td><td align="center">学院-1</td><td align="center">院长-1</td><td align="center">课程-1</td><td align="center">90</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-2</td><td align="center">80</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-1</td><td align="center">100</td></tr><tr><td align="center">3</td><td align="center">学生-3</td><td align="center">学院-2</td><td align="center">院长-2</td><td align="center">课程-2</td><td align="center">95</td></tr></tbody></table><p>以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：</p><ul><li>Sno -&gt; Sname, Sdept</li><li>Sdept -&gt; Mname</li><li>Sno, Cname-&gt; Grade</li></ul><p>Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。</p><p>Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</p><p><strong>分解后</strong></p><p>关系-1</p><table><thead><tr><th align="center">Sno</th><th align="center">Sname</th><th align="center">Sdept</th><th align="center">Mname</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">学生-1</td><td align="center">学院-1</td><td align="center">院长-1</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td><td align="center">院长-2</td></tr><tr><td align="center">3</td><td align="center">学生-3</td><td align="center">学院-2</td><td align="center">院长-2</td></tr></tbody></table><p>有以下函数依赖：</p><ul><li>Sno -&gt; Sname, Sdept</li><li>Sdept -&gt; Mname</li></ul><p>关系-2</p><table><thead><tr><th align="center">Sno</th><th align="center">Cname</th><th align="center">Grade</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">课程-1</td><td align="center">90</td></tr><tr><td align="center">2</td><td align="center">课程-2</td><td align="center">80</td></tr><tr><td align="center">2</td><td align="center">课程-1</td><td align="center">100</td></tr><tr><td align="center">3</td><td align="center">课程-2</td><td align="center">95</td></tr></tbody></table><p>有以下函数依赖：</p><ul><li>Sno, Cname -&gt;  Grade</li></ul><p><strong>第三范式 (3NF)</strong></p><p>非主属性不传递函数依赖于键码。</p><p>上面的 关系-1 中存在以下传递函数依赖：</p><ul><li>Sno -&gt; Sdept -&gt; Mname</li></ul><p>可以进行以下分解：</p><p>关系-11</p><table><thead><tr><th align="center">Sno</th><th align="center">Sname</th><th align="center">Sdept</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">学生-1</td><td align="center">学院-1</td></tr><tr><td align="center">2</td><td align="center">学生-2</td><td align="center">学院-2</td></tr><tr><td align="center">3</td><td align="center">学生-3</td><td align="center">学院-2</td></tr></tbody></table><p>关系-12</p><table><thead><tr><th align="center">Sdept</th><th align="center">Mname</th></tr></thead><tbody><tr><td align="center">学院-1</td><td align="center">院长-1</td></tr><tr><td align="center">学院-2</td><td align="center">院长-2</td></tr></tbody></table><h1 id="ER-图"><a href="#ER-图" class="headerlink" title="ER 图"></a>ER 图</h1><p>Entity-Relationship，有三个组成部分：实体、属性、联系。</p><p>用来进行关系型数据库系统的概念设计。</p><h2 id="实体的三种联系"><a href="#实体的三种联系" class="headerlink" title="实体的三种联系"></a>实体的三种联系</h2><p>包含一对一，一对多，多对多三种。</p><ul><li>如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；</li><li>如果是一对一，画两个带箭头的线段；</li><li>如果是多对多，画两个不带箭头的线段。</li></ul><p>下图的 Course 和 Student 是一对多的关系。</p><p><img src="https://gitee.com/haxianhe/image/raw/master/image/20201122154629.png"></p><h2 id="表示出现多次的关系"><a href="#表示出现多次的关系" class="headerlink" title="表示出现多次的关系"></a>表示出现多次的关系</h2><p>一个实体在联系出现几次，就要用几条线连接。</p><p>下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20200520092446.png"></p><h2 id="联系的多向性"><a href="#联系的多向性" class="headerlink" title="联系的多向性"></a>联系的多向性</h2><p>虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20230412162952.png"></p><h2 id="表示子类"><a href="#表示子类" class="headerlink" title="表示子类"></a>表示子类</h2><p>用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。</p><p><img src="https://raw.githubusercontent.com/haxianhe/pic/master/image/20230412163018.png"></p></br></br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在实际业务中经常会使用到 JSON 数据类型，在查询过程中主要有两种使用需求：&lt;/p&gt;
&lt;ol&gt;
</summary>
      
    
    
    
    <category term="专业知识" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    <category term="中间件" scheme="https://blog.haxianhe.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="mysql" scheme="https://blog.haxianhe.com/tags/mysql/"/>
    
  </entry>
  
</feed>
